
[
  {
    "id": "arrays",
    "name": "Arrays",
    "description": "Master the fundamental data structure for storing collections of elements.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Find the largest element in an array." },
      { "id": 2, "name": "2", "question": "Check if an array is sorted." },
      { "id": 3, "name": "3", "question": "Remove duplicates from a sorted array." },
      { "id": 4, "name": "4", "question": "Rotate array by k elements." },
      { "id": 5, "name": "5", "question": "Move all zeros to the end of the array." },
      { "id": 6, "name": "6", "question": "Find the Union of two sorted arrays." },
      { "id": 7, "name": "7", "question": "Find missing number in an array." },
      { "id": 8, "name": "8", "question": "Maximum consecutive ones." },
      { "id": 9, "name": "9", "question": "Find the number that appears once." },
      { "id": 10, "name": "10", "question": "Two Sum Problem." },
      { "id": 11, "name": "11", "question": "Sort an array of 0s, 1s and 2s." },
      { "id": 12, "name": "12", "question": "Majority Element (>N/2 times)." },
      { "id": 13, "name": "13", "question": "Kadane's Algorithm for Maximum Subarray Sum." },
      { "id": 14, "name": "14", "question": "Best time to buy and sell stock." },
      { "id": 15, "name": "15", "question": "Rearrange array elements by sign." },
      { "id": 16, "name": "16", "question": "Next Permutation." },
      { "id": 17, "name": "17", "question": "Leaders in an Array problem." },
      { "id": 18, "name": "18", "question": "Longest Consecutive Sequence in an Array." },
      { "id": 19, "name": "19", "question": "Set Matrix Zeros." },
      { "id": 20, "name": "20", "question": "Rotate Image by 90 degrees." },
      { "id": 21, "name": "21", "question": "Spiral Traversal of Matrix." },
      { "id": 22, "name": "22", "isSurprise": true, "question": "Surprise Array Question" }
    ]
  },
  {
    "id": "strings",
    "name": "Strings",
    "description": "Manipulate and process text data with various string algorithms.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Remove outermost parentheses." },
      { "id": 2, "name": "2", "question": "Reverse words in a string." },
      { "id": 3, "name": "3", "question": "Largest odd number in a string." },
      { "id": 4, "name": "4", "question": "Longest common prefix." },
      { "id": 5, "name": "5", "question": "Isomorphic strings." },
      { "id": 6, "name": "6", "question": "Check if one string is a rotation of another." },
      { "id": 7, "name": "7", "question": "Check if strings are anagrams." },
      { "id": 8, "name": "8", "question": "Sort characters by frequency." },
      { "id": 9, "name": "9", "question": "Maximum nesting depth of parentheses." },
      { "id": 10, "name": "10", "question": "Roman to Integer." },
      { "id": 11, "name": "11", "question": "String to Integer (atoi)." },
      { "id": 12, "name": "12", "question": "Count with K different characters." },
      { "id": 13, "name": "13", "isSurprise": true, "question": "Surprise String Question" }
    ]
  },
  {
    "id": "linked-lists",
    "name": "Linked Lists",
    "description": "Learn to manage dynamic data sets with nodes and pointers.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "Introduction to Linked List." },
      { "id": 2, "name": "2", "question": "Delete a Node in a Linked List." },
      { "id": 3, "name": "3", "question": "Reverse a Linked List." },
      { "id": 4, "name": "4", "question": "Find the middle of a Linked List." },
      { "id": 5, "name": "5", "question": "Detect a cycle in a Linked List." },
      { "id": 6, "name": "6", "question": "Find the starting point of the Loop of Linked List." },
      { "id": 7, "name": "7", "question": "Check if a Linked List is a palindrome." },
      { "id": 8, "name": "8", "question": "Add two numbers represented by linked lists." },
      { "id": 9, "name": "9", "question": "Merge two sorted linked lists." },
      { "id": 10, "name": "10", "question": "Delete the Nth node from the end of the Linked List." },
      { "id": 11, "name": "11", "question": "Rotate a Linked List." },
      { "id": 12, "name": "12", "isSurprise": true, "question": "Surprise Linked List Question" }
    ]
  },
  {
    "id": "stacks-queues",
    "name": "Stacks & Queues",
    "description": "Understand LIFO and FIFO data structures and their applications.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Implement Stack using Arrays." },
      { "id": 2, "name": "2", "question": "Implement Queue using Arrays." },
      { "id": 3, "name": "3", "question": "Implement Stack using Queues." },
      { "id": 4, "name": "4", "question": "Implement Queue using Stacks." },
      { "id": 5, "name": "5", "question": "Check for balanced parentheses." },
      { "id": 6, "name": "6", "question": "Next Greater Element." },
      { "id": 7, "name": "7", "question": "Implement a Min Stack." },
      { "id": 8, "name": "8", "isSurprise": true, "question": "Surprise Stack/Queue Question" }
    ]
  },
  {
    "id": "recursion",
    "name": "Recursion & Backtracking",
    "description": "Solve complex problems by breaking them into smaller, self-similar subproblems.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "Print N to 1 using recursion." },
      { "id": 2, "name": "2", "question": "Sum of first N numbers." },
      { "id": 3, "name": "3", "question": "Factorial of N." },
      { "id": 4, "name": "4", "question": "Reverse an array using recursion." },
      { "id": 5, "name": "5", "question": "Check if a string is a palindrome." },
      { "id": 6, "name": "6", "question": "Generate all binary strings." },
      { "id": 7, "name": "7", "question": "Generate Parentheses." },
      { "id": 8, "name": "8", "question": "Subsets Sum." },
      { "id": 9, "name": "9", "question": "Combination Sum." },
      { "id": 10, "name": "10", "question": "N-Queens Problem." },
      { "id": 11, "name": "11", "question": "Sudoku Solver." },
      { "id": 12, "name": "12", "isSurprise": true, "question": "Surprise Recursion Question" }
    ]
  },
  {
    "id": "trees",
    "name": "Trees",
    "description": "Explore hierarchical data structures with nodes and edges.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "Binary Tree Traversal (Inorder, Preorder, Postorder)." },
      { "id": 2, "name": "2", "question": "Level Order Traversal." },
      { "id": 3, "name": "3", "question": "Height of a Binary Tree." },
      { "id": 4, "name": "4", "question": "Check for Balanced Binary Tree." },
      { "id": 5, "name": "5", "question": "Diameter of a Binary Tree." },
      { "id": 6, "name": "6", "question": "Maximum Path Sum in a Binary Tree." },
      { "id": 7, "name": "7", "question": "Check if two trees are identical." },
      { "id": 8, "name": "8", "question": "Zigzag Level Order Traversal." },
      { "id": 9, "name": "9", "question": "Boundary Traversal of a Binary Tree." },
      { "id": 10, "name": "10", "question": "Top View of a Binary Tree." },
      { "id": 11, "name": "11", "question": "Lowest Common Ancestor of a Binary Tree." },
      { "id": 12, "name": "12", "question": "Construct Binary Tree from preorder and inorder traversal." },
      { "id": 13, "name": "13", "question": "Validate Binary Search Tree." },
      { "id": 14, "name": "14", "isSurprise": true, "question": "Surprise Tree Question" }
    ]
  },
  {
    "id": "graphs",
    "name": "Graphs",
    "description": "Represent and solve network problems with nodes and connections.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "Graph representation (Adjacency Matrix, Adjacency List)." },
      { "id": 2, "name": "2", "question": "Breadth-First Search (BFS)." },
      { "id": 3, "name": "3", "question": "Depth-First Search (DFS)." },
      { "id": 4, "name": "4", "question": "Number of Provinces." },
      { "id": 5, "name": "5", "question": "Detect cycle in an undirected graph." },
      { "id": 6, "name": "6", "question": "Detect cycle in a directed graph." },
      { "id": 7, "name": "7", "question": "Topological Sort." },
      { "id": 8, "name": "8", "question": "Shortest path in an unweighted graph." },
      { "id": 9, "name": "9", "question": "Dijkstra's Algorithm." },
      { "id": 10, "name": "10", "question": "Prim's Algorithm for Minimum Spanning Tree." },
      { "id": 11, "name": "11", "isSurprise": true, "question": "Surprise Graph Question" }
    ]
  },
  {
    "id": "hash-tables",
    "name": "Hash Tables",
    "description": "Implement efficient key-value lookups with hashing.",
    "initialLives": 3,
    "levels": [
        { "id": 1, "name": "1", "question": "Count frequency of array elements." },
        { "id": 2, "name": "2", "question": "Find the highest/lowest frequency elements." },
        { "id": 3, "name": "3", "question": "Two Sum problem using hashing." },
        { "id": 4, "name": "4", "question": "Four Sum problem." },
        { "id": 5, "name": "5", "question": "Longest consecutive sequence." },
        { "id": 6, "name": "6", "question": "Largest subarray with 0 sum." },
        { "id": 7, "name": "7", "question": "Count number of subarrays with given xor K." },
        { "id": 8, "name": "8", "isSurprise": true, "question": "Surprise Hashing Question" }
    ]
  },
  {
    "id": "heaps",
    "name": "Heaps",
    "description": "Master priority queues and their implementations using heaps.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Implement a Max-Heap from an array." },
      { "id": 2, "name": "2", "question": "Kth largest element in an array." },
      { "id": 3, "name": "3", "question": "Merge K sorted arrays." },
      { "id": 4, "name": "4", "question": "Find median from a data stream." },
      { "id": 5, "name": "5", "isSurprise": true, "question": "Surprise Heap Question" }
    ]
  },
  {
    "id": "dynamic-programming",
    "name": "Dynamic Programming",
    "description": "Optimize recursive solutions by storing results of subproblems.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "Fibonacci Number using DP." },
      { "id": 2, "name": "2", "question": "Climbing Stairs." },
      { "id": 3, "name": "3", "question": "House Robber." },
      { "id": 4, "name": "4", "question": "0/1 Knapsack Problem." },
      { "id": 5, "name": "5", "question": "Longest Common Subsequence." },
      { "id": 6, "name": "6", "question": "Longest Increasing Subsequence." },
      { "id": 7, "name": "7", "question": "Edit Distance." },
      { "id": 8, "name": "8", "question": "Coin Change." },
      { "id": 9, "name": "9", "question": "Matrix Chain Multiplication." },
      { "id": 10, "name": "10", "question": "Best Time to Buy and Sell Stock with Cooldown." },
      { "id": 11, "name": "11", "isSurprise": true, "question": "Surprise DP Question" }
    ]
  },
  {
    "id": "sorting-searching",
    "name": "Sorting & Searching",
    "description": "Efficiently organize and find data in collections.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Implement Bubble Sort." },
      { "id": 2, "name": "2", "question": "Implement Selection Sort." },
      { "id": 3, "name": "3", "question": "Implement Insertion Sort." },
      { "id": 4, "name": "4", "question": "Implement Merge Sort." },
      { "id": 5, "name": "5", "question": "Implement Quick Sort." },
      { "id": 6, "name": "6", "question": "Binary Search Algorithm." },
      { "id": 7, "name": "7", "question": "Find first and last positions of an element in a sorted array." },
      { "id": 8, "name": "8", "question": "Search in a rotated sorted array." },
      { "id": 9, "name": "9", "question": "Find peak element." },
      { "id": 10, "name": "10", "isSurprise": true, "question": "Surprise Sort/Search Question" }
    ]
  },
  {
    "id": "bit-manipulation",
    "name": "Bit Manipulation",
    "description": "Perform operations at the bit level for optimization.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Check if a number is even or odd." },
      { "id": 2, "name": "2", "question": "Count set bits in an integer." },
      { "id": 3, "name": "3", "question": "Power of Two." },
      { "id": 4, "name": "4", "question": "Find the only non-repeating element in an array where every other element repeats twice." },
      { "id": 5, "name": "5", "question": "Swap two numbers without using a temporary variable." },
      { "id": 6, "name": "6", "isSurprise": true, "question": "Surprise Bit Manipulation Question" }
    ]
  }
]

    