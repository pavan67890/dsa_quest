
[
  {
    "id": "arrays",
    "name": "Arrays",
    "description": "Master the fundamentals of array manipulation, searching, and sorting.",
    "initialLives": 3,
    "levelCount": 16,
    "dataFile": "/modules/arrays.json"
  },
  {
    "id": "binary-search",
    "name": "Binary Search",
    "description": "Learn the power of divide and conquer with binary search on sorted data.",
    "initialLives": 3,
    "levelCount": 15,
    "dataFile": "/modules/binary-search.json"
  },
  {
    "id": "strings",
    "name": "Strings",
    "description": "Dive into string manipulation, pattern matching, and parsing techniques.",
    "initialLives": 3,
    "levelCount": 10,
    "dataFile": "/modules/strings.json"
  },
  {
    "id": "linked-list",
    "name": "Linked Lists",
    "description": "Understand pointers and node-based data structures with Linked Lists.",
    "initialLives": 3,
    "levelCount": 12,
    "dataFile": "/modules/linked-list.json"
  },
  {
    "id": "recursion-backtracking",
    "name": "Recursion & Backtracking",
    "description": "Solve complex problems by breaking them down into smaller, recursive pieces.",
    "initialLives": 3,
    "levelCount": 10,
    "dataFile": "/modules/recursion.json"
  },
  {
    "id": "heaps",
    "name": "Heaps",
    "description": "Explore priority queues and efficient retrieval of min/max elements using heaps.",
    "initialLives": 3,
    "levelCount": 6,
    "dataFile": "/modules/heaps.json"
  },
  {
    "id": "greedy",
    "name": "Greedy Algorithms",
    "description": "Learn to make locally optimal choices that lead to a global optimum.",
    "initialLives": 3,
    "levelCount": 6,
    "dataFile": "/modules/greedy.json"
  },
  {
    "id": "trees",
    "name": "Trees",
    "description": "Master hierarchical data structures, including binary trees, BSTs, and traversals.",
    "initialLives": 5,
    "levelCount": 20,
    "dataFile": "/modules/trees.json"
  },
  {
    "id": "graphs",
    "name": "Graphs",
    "description": "Conquer graph theory, including traversals (BFS, DFS), shortest paths, and cycles.",
    "initialLives": 5,
    "levelCount": 18,
    "dataFile": "/modules/graphs.json"
  },
  {
    "id": "dynamic-programming",
    "name": "Dynamic Programming",
    "description": "Tackle complex optimization problems by storing and reusing subproblem solutions.",
    "initialLives": 5,
    "levelCount": 15,
    "dataFile": "/modules/dynamic-programming.json"
  }
]
