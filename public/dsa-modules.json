
[
    {
        "id": "step-1-basics",
        "name": "Step 1: Learn The Basics",
        "description": "Build a strong foundation with core programming concepts and patterns.",
        "initialLives": 5,
        "levels": [
            { "id": 1, "name": "Pattern 1", "question": "Rectangular Star Pattern. For N=3, print:\\n***\\n***\\n***" },
            { "id": 2, "name": "Pattern 2", "question": "Right-Angled Number Pyramid. For N=3, print:\\n1\\n1 2\\n1 2 3" },
            { "id": 3, "name": "Pattern 3", "question": "Right-Angled Number Pyramid II. For N=3, print:\\n1\\n2 2\\n3 3 3" },
            { "id": 4, "name": "Pattern 4", "question": "Inverted Right Pyramid. For N=3, print:\\n* * *\\n* *\\n*" },
            { "id": 5, "name": "Pattern 5", "question": "Inverted Numbered Right Pyramid. For N=3, print:\\n1 2 3\\n1 2\\n1" },
            { "id": 6, "name": "Pattern 6", "question": "Star Pyramid. For N=3, print:\\n  *\\n * * \\n* * *" },
            { "id": 7, "name": "Pattern 7", "question": "Inverted Star Pyramid. For N=3, print:\\n* * *\\n * * \\n  *" },
            { "id": 8, "name": "Pattern 8", "question": "Diamond Star Pattern. For N=3, print a diamond of stars."},
            { "id": 9, "name": "Math 1", "question": "Count the digits of a number. Input: 123, Output: 3" },
            { "id": 10, "name": "Math 2", "question": "Reverse a number. Input: 123, Output: 321" },
            { "id": 11, "name": "Math 3", "question": "Check if a number is a Palindrome. Input: 121, Output: true" },
            { "id": 12, "name": "Math 4", "question": "Find the GCD of two numbers. Input: (4, 8), Output: 4" },
            { "id": 13, "name": "Math 5", "question": "Check if a number is an Armstrong Number. Input: 153, Output: true" },
            { "id": 14, "name": "Math 6", "question": "Print all divisors of a number. Input: 36, Output: 1, 2, 3, 4, 6, 9, 12, 18, 36" },
            { "id": 15, "name": "Math 7", "question": "Check if a number is Prime. Input: 7, Output: true" },
            { "id": 16, "name": "Recursion 1", "question": "Sum of first N numbers using recursion. Input: 5, Output: 15" },
            { "id": 17, "name": "Recursion 2", "question": "Calculate factorial of N using recursion. Input: 5, Output: 120" },
            { "id": 18, "name": "Recursion 3", "question": "Reverse an array using recursion. Input: [1,2,3], Output: [3,2,1]" },
            { "id": 19, "name": "Recursion 4", "question": "Check if a string is a palindrome using recursion. Input: \"racecar\", Output: true" },
            { "id": 20, "name": "Recursion 5", "question": "Calculate the N-th Fibonacci number using recursion. Input: 6, Output: 8" },
            { "id": 21, "name": "Hashing 1", "question": "Count frequency of each element in an array. Input: [1,2,1,3,2], Output: 1->2, 2->2, 3->1" },
            { "id": 22, "name": "Hashing 2", "question": "Find the highest and lowest frequency elements. Input: [1,2,1,3,2,1], Output: Highest: 1, Lowest: 3" },
            { "id": 23, "name": "Surprise", "question": "Explain the concept of recursion and its components (base case, recursive step).", "isSurprise": true }
        ]
    },
    {
        "id": "step-2-sorting",
        "name": "Step 2: Sorting Techniques",
        "description": "Master fundamental sorting algorithms and their complexities.",
        "initialLives": 5,
        "levels": [
            { "id": 1, "name": "Sort 1", "question": "Implement Selection Sort. Input: [64, 25, 12, 22, 11], Output: [11, 12, 22, 25, 64]" },
            { "id": 2, "name": "Sort 2", "question": "Implement Bubble Sort. Input: [64, 34, 25, 12, 22, 11, 90], Output: [11, 12, 22, 25, 34, 64, 90]" },
            { "id": 3, "name": "Sort 3", "question": "Implement Insertion Sort. Input: [12, 11, 13, 5, 6], Output: [5, 6, 11, 12, 13]" },
            { "id": 4, "name": "Sort 4", "question": "Implement Merge Sort. Input: [12, 11, 13, 5, 6, 7], Output: [5, 6, 7, 11, 12, 13]" },
            { "id": 5, "name": "Sort 5", "question": "Implement Quick Sort. Input: [10, 7, 8, 9, 1, 5], Output: [1, 5, 7, 8, 9, 10]" },
            { "id": 6, "name": "Sort 6", "question": "Implement recursive Bubble Sort." },
            { "id": 7, "name": "Sort 7", "question": "Implement recursive Insertion Sort." },
            { "id": 8, "name": "Surprise", "question": "What are stable and unstable sorting algorithms? Give examples.", "isSurprise": true }
        ]
    },
    {
        "id": "step-3-arrays",
        "name": "Step 3: Problems on Arrays",
        "description": "Solve a variety of problems on arrays, from easy to hard, to build a strong foundation.",
        "initialLives": 5,
        "levels": [
            { "id": 1, "name": "Easy 1", "question": "Find the largest element in an array. Input: [3, 2, 1, 5, 2], Output: 5" },
            { "id": 2, "name": "Easy 2", "question": "Find the second largest and second smallest element. Input: [1, 2, 3, 4, 5], Output: Second Smallest: 2, Second Largest: 4" },
            { "id": 3, "name": "Easy 3", "question": "Check if an array is sorted. Input: [1, 2, 3, 4], Output: true" },
            { "id": 4, "name": "Easy 4", "question": "Remove duplicates from a sorted array in-place. Input: [1,1,2], Output: [1,2,_]" },
            { "id": 5, "name": "Easy 5", "question": "Left rotate an array by one place. Input: [1,2,3,4], Output: [2,3,4,1]" },
            { "id": 6, "name": "Easy 6", "question": "Left rotate an array by D places. Input: ([1,2,3,4,5], 2), Output: [3,4,5,1,2]" },
            { "id": 7, "name": "Easy 7", "question": "Move all zeros to the end of the array. Input: [1,0,2,0,3], Output: [1,2,3,0,0]" },
            { "id": 8, "name": "Easy 8", "question": "Find the union of two sorted arrays. Input: ([1,2,3],[2,3,4]), Output: [1,2,3,4]" },
            { "id": 9, "name": "Easy 9", "question": "Find the missing number in an array. Input: [3,0,1], Output: 2" },
            { "id": 10, "name": "Easy 10", "question": "Find the maximum number of consecutive 1s. Input: [1,1,0,1,1,1], Output: 3" },
            { "id": 11, "name": "Easy 11", "question": "Find the number that appears once. Input: [2,2,1], Output: 1" },
            { "id": 12, "name": "Easy 12", "question": "Find the longest subarray with a given sum K (positives). Input: ([1,2,3], 3), Output: 2" },
            { "id": 13, "name": "Medium 1", "question": "Two Sum: Find indices of two numbers that add up to a target. Input: ([2,7,11,15], 9), Output: [0,1]" },
            { "id": 14, "name": "Medium 2", "question": "Sort an array of 0s, 1s, and 2s. Input: [2,0,2,1,1,0], Output: [0,0,1,1,2,2]" },
            { "id": 15, "name": "Medium 3", "question": "Majority Element (>N/2 times). Input: [2,2,1,1,1,2,2], Output: 2" },
            { "id": 16, "name": "Medium 4", "question": "Kadane's Algorithm: Find the maximum subarray sum. Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6" },
            { "id": 17, "name": "Medium 5", "question": "Stock Buy and Sell. Input: [7,1,5,3,6,4], Output: 5" },
            { "id": 18, "name": "Medium 6", "question": "Rearrange array elements by sign. Input: [3,1,-2,-5,2,-4], Output: [3,-2,1,-5,2,-4]" },
            { "id": 19, "name": "Medium 7", "question": "Next Permutation. Input: [1,2,3], Output: [1,3,2]" },
            { "id": 20, "name": "Medium 8", "question": "Find leaders in an array. Input: [16,17,4,3,5,2], Output: [17,5,2]" },
            { "id": 21, "name": "Medium 9", "question": "Find the longest consecutive sequence. Input: [100,4,200,1,3,2], Output: 4" },
            { "id": 22, "name": "Medium 10", "question": "Set Matrix Zeroes. If an element is 0, set its row and column to 0." },
            { "id": 23, "name": "Medium 11", "question": "Rotate a square matrix by 90 degrees. Input: [[1,2],[3,4]], Output: [[3,1],[4,2]]" },
            { "id": 24, "name": "Medium 12", "question": "Print a matrix in spiral order. Input: [[1,2,3],[4,5,6],[7,8,9]], Output: [1,2,3,6,9,8,7,4,5]" },
            { "id": 25, "name": "Hard 1", "question": "Pascal's Triangle. Input: 5, Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]" },
            { "id": 26, "name": "Hard 2", "question": "Majority Element II (>N/3 times). Input: [3,2,3], Output: [3]" },
            { "id": 27, "name": "Hard 3", "question": "3-Sum: Find all triplets that sum to zero. Input: [-1,0,1,2,-1,-4], Output: [[-1,-1,2],[-1,0,1]]" },
            { "id": 28, "name": "Hard 4", "question": "4-Sum: Find all quadruplets that sum to a target. Input: ([1,0,-1,0,-2,2], 0), Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]" },
            { "id": 29, "name": "Hard 5", "question": "Length of the largest subarray with a sum of 0. Input: [15,-2,2,-8,1,7,10,23], Output: 5" },
            { "id": 30, "name": "Hard 6", "question": "Count the number of subarrays with a given XOR K. Input: ([4,2,2,6,4], 6), Output: 4" },
            { "id": 31, "name": "Hard 7", "question": "Merge Overlapping Intervals. Input: [[1,3],[2,6],[8,10]], Output: [[1,6],[8,10]]" },
            { "id": 32, "name": "Hard 8", "question": "Merge two sorted arrays without using extra space." },
            { "id": 33, "name": "Hard 9", "question": "Find the repeating and missing numbers. Input: [3,1,2,5,3], Output: Repeating=3, Missing=4" },
            { "id": 34, "name": "Hard 10", "question": "Count inversions in an array. Input: [8,4,2,1], Output: 6" },
            { "id": 35, "name": "Hard 11", "question": "Find all reverse pairs in an array. Input: [1,3,2,3,1], Output: 2" },
            { "id": 36, "name": "Hard 12", "question": "Find the maximum product of a contiguous subarray. Input: [2,3,-2,4], Output: 6" },
            { "id": 37, "name": "Surprise", "question": "Compare the approaches for solving the Two Sum problem (brute-force, hashing, two-pointers).", "isSurprise": true }
        ]
    },
    {
        "id": "step-4-binary-search",
        "name": "Step 4: Binary Search",
        "description": "Learn binary search on 1D/2D arrays and its application in search spaces.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "1D L1", "question": "Implement binary search to find a target in a sorted array. Input: ([-1,0,3,5,9,12], 9), Output: 4" },
            { "id": 2, "name": "1D L2", "question": "Implement a function to find the lower bound of a number. Input: ([1,2,2,3], 2), Output: 1" },
            { "id": 3, "name": "1D L3", "question": "Implement a function to find the upper bound of a number. Input: ([1,2,2,3], 2), Output: 3" },
            { "id": 4, "name": "1D L4", "question": "Search Insert Position. Input: ([1,3,5,6], 5), Output: 2" },
            { "id": 5, "name": "1D L5", "question": "Find the first and last occurrence of a number. Input: ([5,7,7,8,8,10], 8), Output: [3,4]" },
            { "id": 6, "name": "1D L6", "question": "Count occurrences of a number in a sorted array. Input: ([1,1,2,2,2,3], 2), Output: 3" },
            { "id": 7, "name": "1D L7", "question": "Search in Rotated Sorted Array I. Input: ([4,5,6,7,0,1,2], 0), Output: 4" },
            { "id": 8, "name": "1D L8", "question": "Search in Rotated Sorted Array II (with duplicates). Input: ([2,5,6,0,0,1,2], 0), Output: true" },
            { "id": 9, "name": "1D L9", "question": "Find the minimum element in a rotated sorted array. Input: [3,4,5,1,2], Output: 1" },
            { "id": 10, "name": "1D L10", "question": "Find a peak element. Input: [1,2,3,1], Output: 2" },
            { "id": 11, "name": "1D L11", "question": "Find a single element in a sorted array. Input: [1,1,2,3,3,4,4,8,8], Output: 2" },
            { "id": 12, "name": "Space 1", "question": "Find the square root of a number using binary search. Input: 8, Output: 2" },
            { "id": 13, "name": "Space 2", "question": "Find the Nth root of a number M. Input: (3, 27), Output: 3" },
            { "id": 14, "name": "Space 3", "question": "Koko Eating Bananas. Input: (piles=[3,6,7,11], h=8), Output: 4" },
            { "id": 15, "name": "Space 4", "question": "Minimum days to make M bouquets. Input: (bloomDay=[1,10,3,10,2], m=3, k=1), Output: 3" },
            { "id": 16, "name": "Space 5", "question": "Find the smallest divisor given a threshold. Input: (nums=[1,2,5,9], threshold=6), Output: 5" },
            { "id": 17, "name": "Space 6", "question": "Capacity to ship packages within D days. Input: (weights=[1,2,3,4,5], D=5), Output: 15" },
            { "id": 18, "name": "Space 7", "question": "Find the k-th missing positive number. Input: ([2,3,4,7,11], 5), Output: 9" },
            { "id": 19, "name": "Space 8", "question": "Aggressive Cows. Input: (stalls=[1,2,8,4,9], k=3), Output: 3" },
            { "id": 20, "name": "Space 9", "question": "Book Allocation Problem. Input: (pages=[12,34,67,90], students=2), Output: 113" },
            { "id": 21, "name": "Space 10", "question": "Split array - Largest Sum. Input: ([7,2,5,10,8], k=2), Output: 18" },
            { "id": 22, "name": "Space 11", "question": "Median of two sorted arrays. Input: ([1,3],[2]), Output: 2.0" },
            { "id": 23, "name": "Space 12", "question": "Find the k-th element of two sorted arrays. Input: ([2,3,6,7,9],[1,4,8,10], k=5), Output: 6" },
            { "id": 24, "name": "2D L1", "question": "Search in a 2D matrix. Input: (matrix=[[1,3,5],[10,11,16]], target=3), Output: true" },
            { "id": 25, "name": "2D L2", "question": "Search in a 2D matrix II (rows and columns sorted). Input: (matrix=[[1,4,7],[2,5,8]], target=5), Output: true" },
            { "id": 26, "name": "Surprise", "question": "When can you apply binary search on the answer space? Explain the monotonic function requirement.", "isSurprise": true }
        ]
    },
    {
        "id": "step-5-strings",
        "name": "Step 5: Strings",
        "description": "Dive into string algorithms, pattern matching, and manipulation.",
        "initialLives": 5,
        "levels": [
            { "id": 1, "name": "Easy 1", "question": "Remove outermost parentheses. Input: \"(()())(())\", Output: \"()()()\"" },
            { "id": 2, "name": "Easy 2", "question": "Reverse words in a string. Input: \"the sky is blue\", Output: \"blue is sky the\"" },
            { "id": 3, "name": "Easy 3", "question": "Largest odd number in a string. Input: \"52\", Output: \"5\"" },
            { "id": 4, "name": "Easy 4", "question": "Longest common prefix. Input: [\"flower\",\"flow\",\"flight\"], Output: \"fl\"" },
            { "id": 5, "name": "Easy 5", "question": "Isomorphic strings. Input: (\"egg\", \"add\"), Output: true" },
            { "id": 6, "name": "Easy 6", "question": "Rotate string. Input: (\"abcde\", \"cdeab\"), Output: true" },
            { "id": 7, "name": "Easy 7", "question": "Valid Anagram. Input: (\"anagram\", \"nagaram\"), Output: true" },
            { "id": 8, "name": "Medium 1", "question": "Sort characters by frequency. Input: \"tree\", Output: \"eert\"" },
            { "id": 9, "name": "Medium 2", "question": "Maximum nesting depth of parentheses. Input: \"(1+(2*3)+((8)/4))+1\", Output: 3" },
            { "id": 10, "name": "Medium 3", "question": "Roman to Integer. Input: \"MCMXCIV\", Output: 1994" },
            { "id": 11, "name": "Medium 4", "question": "String to Integer (atoi). Input: \"42\", Output: 42" },
            { "id": 12, "name": "Medium 5", "question": "Count with K different characters. Input: (\"araaci\", 2), Output: 7" },
            { "id": 13, "name": "Medium 6", "question": "Longest substring without repeating characters. Input: \"abcabcbb\", Output: 3" },
            { "id": 14, "name": "Hard 1", "question": "Generate Parentheses. Input: 3, Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]" },
            { "id": 15, "name": "Hard 2", "question": "Minimum window substring. Input: (S=\"ADOBECODEBANC\", T=\"ABC\"), Output: \"BANC\"" },
            { "id": 16, "name": "Surprise", "question": "Explain the KMP (Knuth-Morris-Pratt) algorithm for pattern searching.", "isSurprise": true }
        ]
    },
    {
        "id": "step-6-linked-list",
        "name": "Step 6: Linked List",
        "description": "Master operations on singly, doubly, and circular linked lists.",
        "initialLives": 5,
        "levels": [
            { "id": 1, "name": "1D LL 1", "question": "Introduction to Linked List: Implement a node and a simple list." },
            { "id": 2, "name": "1D LL 2", "question": "Find the middle of a linked list. Input: 1->2->3->4->5, Output: Node 3" },
            { "id": 3, "name": "1D LL 3", "question": "Reverse a linked list. Input: 1->2->3, Output: 3->2->1" },
            { "id": 4, "name": "1D LL 4", "question": "Detect a cycle in a linked list." },
            { "id": 5, "name": "1D LL 5", "question": "Find the starting point of a loop in a linked list." },
            { "id": 6, "name": "1D LL 6", "question": "Find the length of the loop in a linked list." },
            { "id": 7, "name": "1D LL 7", "question": "Check if a linked list is a palindrome. Input: 1->2->2->1, Output: true" },
            { "id": 8, "name": "1D LL 8", "question": "Segregate odd and even nodes. Input: 1->2->3->4->5, Output: 1->3->5->2->4" },
            { "id": 9, "name": "1D LL 9", "question": "Remove the Nth node from the end. Input: (1->2->3->4->5, N=2), Output: 1->2->3->5" },
            { "id": 10, "name": "1D LL 10", "question": "Add two numbers represented by linked lists. Input: (2->4->3) + (5->6->4), Output: 7->0->8" },
            { "id": 11, "name": "Doubly LL 1", "question": "Implement a doubly linked list." },
            { "id": 12, "name": "Doubly LL 2", "question": "Reverse a doubly linked list." },
            { "id": 13, "name": "Medium 1", "question": "Find the intersection of two linked lists." },
            { "id": 14, "name": "Medium 2", "question": "Sort a linked list of 0s, 1s, and 2s." },
            { "id": 15, "name": "Medium 3", "question": "Sort a linked list using merge sort." },
            { "id": 16, "name": "Medium 4", "question": "Delete the middle node of a linked list." },
            { "id": 17, "name": "Medium 5", "question": "Add 1 to a number represented as a linked list." },
            { "id": 18, "name": "Hard 1", "question": "Reverse a linked list in groups of size K. Input: (1->2->3->4->5, k=2), Output: 2->1->4->3->5" },
            { "id": 19, "name": "Hard 2", "question": "Rotate a linked list by K places. Input: (1->2->3->4->5, k=2), Output: 4->5->1->2->3" },
            { "id": 20, "name": "Hard 3", "question": "Clone a linked list with next and random pointers." },
            { "id": 21, "name": "Hard 4", "question": "Flatten a multilevel linked list." },
            { "id": 22, "name": "Surprise", "question": "Design a data structure for a Least Recently Used (LRU) cache.", "isSurprise": true }
        ]
    },
    {
        "id": "step-7-recursion",
        "name": "Step 7: Recursion",
        "description": "Understand and apply recursion to solve complex problems.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "Subseq 1", "question": "Generate all subsequences of a string. Input: \"abc\", Output: \"\", \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", \"abc\"" },
            { "id": 2, "name": "Subseq 2", "question": "Print all subsequences with sum K. Input: ([1,2,1], k=2), Output: [1,1], [2]" },
            { "id": 3, "name": "Combo 1", "question": "Combination Sum I. Input: (candidates=[2,3,6,7], target=7), Output: [[2,2,3],[7]]" },
            { "id": 4, "name": "Combo 2", "question": "Combination Sum II. Input: (candidates=[10,1,2,7,6,1,5], target=8), Output: [[1,1,6],[1,2,5],[1,7],[2,6]]" },
            { "id": 5, "name": "Combo 3", "question": "Subset Sum I. Input: [3,1,2], Output: All possible subset sums" },
            { "id": 6, "name": "Combo 4", "question": "Subset Sum II. Input: [1,2,2], Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]" },
            { "id": 7, "name": "Permute 1", "question": "Generate all permutations of a string/array. Input: [1,2,3], Output: [[1,2,3],[1,3,2],[2,1,3],...]" },
            { "id": 8, "name": "Hard 1", "question": "N-Queens problem. Place N queens on an N×N chessboard so that no two queens attack each other." },
            { "id": 9, "name": "Hard 2", "question": "Sudoku Solver. Fill a 9x9 grid to solve a Sudoku puzzle." },
            { "id": 10, "name": "Hard 3", "question": "Rat in a Maze problem." },
            { "id": 11, "name": "Hard 4", "question": "Word Break problem. Input: (s=\"leetcode\", wordDict=[\"leet\",\"code\"]), Output: true" },
            { "id": 12, "name": "Hard 5", "question": "M-Coloring Problem. Color a graph with at most M colors such that no two adjacent vertices have the same color." },
            { "id": 13, "name": "Surprise", "question": "Explain the difference between recursion and backtracking with a clear example.", "isSurprise": true }
        ]
    },
    {
        "id": "step-8-bit-manipulation",
        "name": "Step 8: Bit Manipulation",
        "description": "Learn bitwise operators and solve problems using bit manipulation techniques.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "Learn 1", "question": "Check if the i-th bit is set. Input: (num=13, i=2), Output: true (1101)" },
            { "id": 2, "name": "Learn 2", "question": "Set the i-th bit. Input: (num=9, i=1), Output: 11 (1001 -> 1011)" },
            { "id": 3, "name": "Learn 3", "question": "Clear the i-th bit. Input: (num=13, i=2), Output: 9 (1101 -> 1001)" },
            { "id": 4, "name": "Learn 4", "question": "Toggle the i-th bit. Input: (num=13, i=1), Output: 15 (1101 -> 1111)" },
            { "id": 5, "name": "Learn 5", "question": "Check if a number is a power of 2. Input: 16, Output: true" },
            { "id": 6, "name": "Learn 6", "question": "Count the number of set bits. Input: 13 (1101), Output: 3" },
            { "id": 7, "name": "Problem 1", "question": "Find the two numbers that appear only once in an array." },
            { "id": 8, "name": "Problem 2", "question": "Generate the power set using bit manipulation. Input: [1,2], Output: [[],[1],[2],[1,2]]" },
            { "id": 9, "name": "Problem 3", "question": "Find XOR of numbers from L to R." },
            { "id": 10, "name": "Surprise", "question": "How can you swap two numbers without using a temporary variable? Explain with bitwise operators.", "isSurprise": true }
        ]
    },
    {
        "id": "step-9-stacks-queues",
        "name": "Step 9: Stacks & Queues",
        "description": "Learn about LIFO and FIFO data structures and their applications.",
        "initialLives": 4,
        "levels": [
            { "id": 1, "name": "Learn 1", "question": "Implement a stack using an array." },
            { "id": 2, "name": "Learn 2", "question": "Implement a queue using an array." },
            { "id": 3, "name": "Learn 3", "question": "Implement a stack using a linked list." },
            { "id": 4, "name": "Learn 4", "question": "Implement a queue using a linked list." },
            { "id": 5, "name": "Problem 1", "question": "Check for balanced parentheses. Input: \"{([])}\", Output: true" },
            { "id": 6, "name": "Problem 2", "question": "Implement a stack using two queues." },
            { "id": 7, "name": "Problem 3", "question": "Implement a queue using two stacks." },
            { "id": 8, "name": "Problem 4", "question": "Find the next greater element. Input: [4,5,2,25], Output: [5,25,25,-1]" },
            { "id": 9, "name": "Problem 5", "question": "Find the next smaller element." },
            { "id": 10, "name": "Problem 6", "question": "Largest rectangle in a histogram. Input: [2,1,5,6,2,3], Output: 10" },
            { "id": 11, "name": "Problem 7", "question": "Sliding Window Maximum. Input: (nums=[1,3,-1,-3,5,3,6,7], k=3), Output: [3,3,5,5,6,7]" },
            { "id": 12, "name": "Implement 1", "question": "Implement a Min Stack in O(1) space." },
            { "id": 13, "name": "Implement 2", "question": "Implement an LRU Cache." },
            { "id": 14, "name": "Implement 3", "question": "Implement an LFU Cache." },
            { "id": 15, "name": "Surprise", "question": "Explain the \"stock span\" problem and how it can be solved efficiently using a monotonic stack.", "isSurprise": true }
        ]
    },
    {
        "id": "step-10-sliding-window",
        "name": "Step 10: Sliding Window & Two Pointers",
        "description": "Master techniques for solving array and string problems efficiently.",
        "initialLives": 4,
        "levels": [
            { "id": 1, "name": "Two Pointer 1", "question": "Longest Substring Without Repeating Characters. Input: \"abcabcbb\", Output: 3" },
            { "id": 2, "name": "Two Pointer 2", "question": "Max consecutive ones with at most k zeros. Input: ([1,1,1,0,0,0,1,1,1,1,0], 2), Output: 6" },
            { "id": 3, "name": "Two Pointer 3", "question": "Fruits into Baskets. Input: [1,2,1,0,3,3], Output: 3" },
            { "id": 4, "name": "Two Pointer 4", "question": "Count number of nice subarrays. Input: ([1,1,2,1,1], 3), Output: 2" },
            { "id": 5, "name": "Two Pointer 5", "question": "Container with most water. Input: [1,8,6,2,5,4,8,3,7], Output: 49" },
            { "id": 6, "name": "Two Pointer 6", "question": "Trapping Rain Water. Input: [0,1,0,2,1,0,1,3,2,1,2,1], Output: 6" },
            { "id": 7, "name": "Two Pointer 7", "question": "Remove duplicates from a sorted array. Input: [0,0,1,1,1,2,2], Output: 5, nums=[0,1,2,_,_]" },
            { "id": 8, "name": "Sliding Window 1", "question": "Longest repeating character replacement. Input: (\"ABAB\", 2), Output: 4" },
            { "id": 9, "name": "Sliding Window 2", "question": "Minimum window substring. Input: (S=\"ADOBECODEBANC\", T=\"ABC\"), Output: \"BANC\"" },
            { "id": 10, "name": "Sliding Window 3", "question": "Sliding Window Maximum. Input: ([1,3,-1,-3,5,3,6,7], 3), Output: [3,3,5,5,6,7]" },
            { "id": 11, "name": "Surprise", "question": "What is the \"Caterpillar Method\" and how does it relate to the two-pointer technique?", "isSurprise": true }
        ]
    },
    {
        "id": "step-11-heaps",
        "name": "Step 11: Heaps",
        "description": "Understand priority queues and solve problems using Min-Heap and Max-Heap.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "Learn 1", "question": "Implement a Priority Queue using a binary heap." },
            { "id": 2, "name": "Medium 1", "question": "Find the k-th largest element in an array. Input: ([3,2,1,5,6,4], k=2), Output: 5" },
            { "id": 3, "name": "Medium 2", "question": "Sort an array using a heap (Heap Sort)." },
            { "id": 4, "name": "Medium 3", "question": "Merge K sorted arrays." },
            { "id": 5, "name": "Medium 4", "question": "Find median from a data stream." },
            { "id": 6, "name": "Hard 1", "question": "K-th largest element in a stream." },
            { "id": 7, "name": "Hard 2", "question": "Top K frequent elements. Input: ([1,1,1,2,2,3], 2), Output: [1,2]" },
            { "id": 8, "name": "Hard 3", "question": "Merge K sorted linked lists." },
            { "id": 9, "name": "Surprise", "question": "Design a system to find the top K most frequent elements in a real-time stream of data.", "isSurprise": true }
        ]
    },
    {
        "id": "step-12-greedy",
        "name": "Step 12: Greedy Algorithms",
        "description": "Learn the greedy approach to find optimal solutions by making locally optimal choices.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "Easy 1", "question": "Assign cookies problem. Input: (g=[1,2,3], s=[1,1]), Output: 1" },
            { "id": 2, "name": "Easy 2", "question": "Activity Selection problem (N meetings in one room)." },
            { "id": 3, "name": "Easy 3", "question": "Find the minimum number of coins to make a given value." },
            { "id": 4, "name": "Medium 1", "question": "Fractional Knapsack problem." },
            { "id": 5, "name": "Medium 2", "question": "Jump Game. Input: [2,3,1,1,4], Output: true" },
            { "id": 6, "name": "Medium 3", "question": "Jump Game II. Input: [2,3,1,1,4], Output: 2" },
            { "id": 7, "name": "Medium 4", "question": "Job Sequencing Problem." },
            { "id": 8, "name": "Hard 1", "question": "Insert Interval. Input: (intervals=[[1,3],[6,9]], newInterval=[2,5]), Output: [[1,5],[6,9]]" },
            { "id": 9, "name": "Surprise", "question": "When does a greedy approach fail? Provide an example where a greedy choice prevents finding the global optimum.", "isSurprise": true }
        ]
    },
    {
        "id": "step-13-trees",
        "name": "Step 13: Binary Trees",
        "description": "Master traversals, views, and complex problems on Binary Trees.",
        "initialLives": 5,
        "levels": [
            { "id": 1, "name": "Traversal 1", "question": "Implement pre-order traversal." },
            { "id": 2, "name": "Traversal 2", "question": "Implement in-order traversal." },
            { "id": 3, "name": "Traversal 3", "question": "Implement post-order traversal." },
            { "id": 4, "name": "Traversal 4", "question": "Implement level-order traversal." },
            { "id": 5, "name": "Medium 1", "question": "Find the maximum depth (height) of a binary tree." },
            { "id": 6, "name": "Medium 2", "question": "Check if a binary tree is balanced." },
            { "id": 7, "name": "Medium 3", "question": "Find the diameter of a binary tree." },
            { "id": 8, "name": "Medium 4", "question": "Find the maximum path sum in a binary tree." },
            { "id": 9, "name": "Medium 5", "question": "Check if two binary trees are identical." },
            { "id": 10, "name": "Medium 6", "question": "Implement Zigzag (Spiral) Level Order Traversal." },
            { "id": 11, "name": "Medium 7", "question": "Find the boundary traversal of a binary tree." },
            { "id": 12, "name": "Medium 8", "question": "Implement the vertical order traversal." },
            { "id": 13, "name": "Medium 9", "question": "Implement the top view of a binary tree." },
            { "id": 14, "name": "Medium 10", "question": "Implement the bottom view of a binary tree." },
            { "id": 15, "name": "Medium 11", "question": "Implement the right view of a binary tree." },
            { "id": 16, "name": "Medium 12", "question": "Implement the left view of a binary tree." },
            { "id": 17, "name": "Medium 13", "question": "Check if a binary tree is symmetric." },
            { "id": 18, "name": "Hard 1", "question": "Find the lowest common ancestor (LCA) of two nodes." },
            { "id": 19, "name": "Hard 2", "question": "Find the maximum width of a binary tree." },
            { "id": 20, "name": "Hard 3", "question": "Find all nodes at distance K from a given node." },
            { "id": 21, "name": "Hard 4", "question": "Find the time taken to burn a tree from a specific node." },
            { "id": 22, "name": "Hard 5", "question": "Count the total number of nodes in a complete binary tree." },
            { "id": 23, "name": "Hard 6", "question": "Construct a binary tree from preorder and inorder traversal." },
            { "id": 24, "name": "Hard 7", "question": "Construct a binary tree from postorder and inorder traversal." },
            { "id": 25, "name": "Hard 8", "question": "Serialize and deserialize a binary tree." },
            { "id": 26, "name": "Hard 9", "question": "Flatten a binary tree to a linked list." },
            { "id": 27, "name": "Surprise", "question": "Explain Morris Traversal and its advantages over recursive/iterative traversals.", "isSurprise": true }
        ]
    },
    {
        "id": "step-14-bst",
        "name": "Step 14: Binary Search Trees",
        "description": "Explore properties and problems related to Binary Search Trees.",
        "initialLives": 4,
        "levels": [
            { "id": 1, "name": "BST 1", "question": "Search for a value in a Binary Search Tree." },
            { "id": 2, "name": "BST 2", "question": "Find the ceil of a key in a BST." },
            { "id": 3, "name": "BST 3", "question": "Find the floor of a key in a BST." },
            { "id": 4, "name": "BST 4", "question": "Insert a node into a BST." },
            { "id": 5, "name": "BST 5", "question": "Delete a node from a BST." },
            { "id": 6, "name": "BST 6", "question": "Find the k-th smallest element in a BST." },
            { "id": 7, "name": "BST 7", "question": "Find the k-th largest element in a BST." },
            { "id": 8, "name": "BST 8", "question": "Validate if a given binary tree is a Binary Search Tree." },
            { "id": 9, "name": "BST 9", "question": "Find the Lowest Common Ancestor (LCA) of two nodes in a BST." },
            { "id": 10, "name": "BST 10", "question": "Construct a BST from a preorder traversal." },
            { "id": 11, "name": "BST 11", "question": "Find the inorder successor/predecessor of a given node in a BST." },
            { "id": 12, "name": "BST 12", "question": "Implement a BST iterator (next and hasNext)." },
            { "id": 13, "name": "BST 13", "question": "Find a pair with a given sum in a BST." },
            { "id": 14, "name": "BST 14", "question": "Recover a BST where two nodes are swapped." },
            { "id": 15, "name": "BST 15", "question": "Find the largest BST subtree in a given binary tree." },
            { "id": 16, "name": "Surprise", "question": "What is a self-balancing BST (like AVL or Red-Black Tree) and why is it important?", "isSurprise": true }
        ]
    },
    {
        "id": "step-15-graphs",
        "name": "Step 15: Graphs",
        "description": "Learn graph representations, traversal algorithms, and common graph problems.",
        "initialLives": 5,
        "levels": [
            { "id": 1, "name": "Learn 1", "question": "Explain and implement graph representations: Adjacency Matrix and Adjacency List." },
            { "id": 2, "name": "BFS/DFS 1", "question": "Implement Breadth-First Search (BFS)." },
            { "id": 3, "name": "BFS/DFS 2", "question": "Implement Depth-First Search (DFS)." },
            { "id": 4, "name": "BFS/DFS 3", "question": "Number of Provinces (Connected Components)." },
            { "id": 5, "name": "BFS/DFS 4", "question": "Number of Islands." },
            { "id": 6, "name": "BFS/DFS 5", "question": "Flood Fill algorithm." },
            { "id": 7, "name": "BFS/DFS 6", "question": "Rotting Oranges." },
            { "id": 8, "name": "BFS/DFS 7", "question": "Detect a cycle in an undirected graph." },
            { "id": 9, "name": "BFS/DFS 8", "question": "0/1 Matrix (Distance of nearest cell having 1)." },
            { "id": 10, "name": "BFS/DFS 9", "question": "Surrounded Regions (O/X problem)." },
            { "id": 11, "name": "BFS/DFS 10", "question": "Number of Enclaves." },
            { "id": 12, "name": "BFS/DFS 11", "question": "Word Ladder I and II." },
            { "id": 13, "name": "TopoSort 1", "question": "Detect a cycle in a directed graph using DFS." },
            { "id": 14, "name": "TopoSort 2", "question": "Topological Sort (Kahn's Algorithm - BFS)." },
            { "id": 15, "name": "TopoSort 3", "question": "Topological Sort (DFS)." },
            { "id": 16, "name": "TopoSort 4", "question": "Course Schedule I and II." },
            { "id": 17, "name": "ShortestPath 1", "question": "Shortest path in an unweighted graph from source to all vertices." },
            { "id": 18, "name": "ShortestPath 2", "question": "Shortest path in a Directed Acyclic Graph (DAG)." },
            { "id": 19, "name": "ShortestPath 3", "question": "Dijkstra's Algorithm using a Priority Queue." },
            { "id": 20, "name": "ShortestPath 4", "question": "Shortest path in a binary maze." },
            { "id": 21, "name": "ShortestPath 5", "question": "Path with minimum effort." },
            { "id": 22, "name": "ShortestPath 6", "question": "Cheapest flights within K stops." },
            { "id": 23, "name": "ShortestPath 7", "question": "Bellman-Ford algorithm." },
            { "id": 24, "name": "ShortestPath 8", "question": "Floyd-Warshall algorithm." },
            { "id": 25, "name": "MST 1", "question": "Prim's algorithm for Minimum Spanning Tree." },
            { "id": 26, "name": "MST 2", "question": "Kruskal's algorithm for Minimum Spanning Tree." },
            { "id": 27, "name": "MST 3", "question": "Number of operations to make a network connected." },
            { "id": 28, "name": "Other 1", "question": "Find bridges in a graph." },
            { "id": 29, "name": "Other 2", "question": "Find articulation points in a graph." },
            { "id": 30, "name": "Other 3", "question": "Kosaraju's algorithm for strongly connected components." },
            { "id": 31, "name": "Other 4", "question": "Check if a graph is bipartite (two-colorable)."},
            { "id": 32, "name": "Surprise", "question": "Compare and contrast Dijkstra's, Bellman-Ford, and Floyd-Warshall algorithms.", "isSurprise": true }
        ]
    },
    {
        "id": "step-16-dp",
        "name": "Step 16: Dynamic Programming",
        "description": "Master DP by solving problems from 1D to multidimensional.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "1D-1", "question": "Climbing Stairs. Input: 3, Output: 3" },
            { "id": 2, "name": "1D-2", "question": "Frog Jump problem. Input: [10,20,30,10], Output: 20" },
            { "id": 3, "name": "1D-3", "question": "House Robber. Input: [1,2,3,1], Output: 4" },
            { "id": 4, "name": "1D-4", "question": "House Robber II. Input: [2,3,2], Output: 3" },
            { "id": 5, "name": "2D-1", "question": "Ninja's Training. Input: [[1,2,5],[3,1,1],[3,3,3]], Output: 11" },
            { "id": 6, "name": "2D-2", "question": "Unique Paths in a grid. Input: m=3, n=7, Output: 28" },
            { "id": 7, "name": "2D-3", "question": "Unique Paths II (with obstacles)." },
            { "id": 8, "name": "2D-4", "question": "Minimum Path Sum in a grid. Input: [[1,3,1],[1,5,1],[4,2,1]], Output: 7" },
            { "id": 9, "name": "2D-5", "question": "Minimum Path Sum in a triangle." },
            { "id": 10, "name": "Subseq 1", "question": "Subset Sum Equal to Target. Input: ([1,2,3,4], 4), Output: true" },
            { "id": 11, "name": "Subseq 2", "question": "Partition Equal Subset Sum. Input: [1,5,11,5], Output: true" },
            { "id": 12, "name": "Subseq 3", "question": "Count subsets with sum K." },
            { "id": 13, "name": "Subseq 4", "question": "0/1 Knapsack problem." },
            { "id": 14, "name": "Subseq 5", "question": "Coin Change. Input: (coins=[1,2,5], amount=11), Output: 3" },
            { "id": 15, "name": "Subseq 6", "question": "Unbounded Knapsack." },
            { "id": 16, "name": "Subseq 7", "question": "Rod Cutting problem." },
            { "id": 17, "name": "Strings 1", "question": "Longest Common Subsequence. Input: (\"abcde\", \"ace\"), Output: 3" },
            { "id": 18, "name": "Strings 2", "question": "Longest Palindromic Subsequence. Input: \"bbbab\", Output: 4" },
            { "id": 19, "name": "Strings 3", "question": "Minimum insertions to make a string palindrome." },
            { "id": 20, "name": "Strings 4", "question": "Minimum insertions/deletions to convert string A to B." },
            { "id": 21, "name": "Strings 5", "question": "Shortest Common Supersequence." },
            { "id": 22, "name": "Strings 6", "question": "Distinct Subsequences." },
            { "id": 23, "name": "Strings 7", "question": "Edit Distance." },
            { "id": 24, "name": "Strings 8", "question": "Wildcard Matching." },
            { "id": 25, "name": "Stocks 1", "question": "Best time to buy and sell stock." },
            { "id": 26, "name": "Stocks 2", "question": "Best time to buy and sell stock II." },
            { "id": 27, "name": "Stocks 3", "question": "Best time to buy and sell stock III." },
            { "id": 28, "name": "Stocks 4", "question": "Best time to buy and sell stock IV." },
            { "id": 29, "name": "Stocks 5", "question": "Best time to buy and sell stock with cooldown." },
            { "id": 30, "name": "Stocks 6", "question": "Best time to buy and sell stock with transaction fee." },
            { "id": 31, "name": "LIS 1", "question": "Longest Increasing Subsequence. Input: [10,9,2,5,3,7,101,18], Output: 4" },
            { "id": 32, "name": "LIS 2", "question": "Largest Divisible Subset." },
            { "id": 33, "name": "LIS 3", "question": "Longest String Chain." },
            { "id": 34, "name": "LIS 4", "question": "Longest Bitonic Subsequence." },
            { "id": 35, "name": "MCM 1", "question": "Matrix Chain Multiplication." },
            { "id": 36, "name": "MCM 2", "question": "Burst Balloons." },
            { "id": 37, "name": "MCM 3", "question": "Palindrome Partitioning II." },
            { "id": 38, "name": "Surprise", "question": "Explain the difference between memoization (top-down) and tabulation (bottom-up) DP.", "isSurprise": true }
        ]
    },
    {
        "id": "step-17-tries",
        "name": "Step 17: Tries",
        "description": "Learn the Trie data structure for efficient string searching.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "Trie 1", "question": "Implement a Trie (Prefix Tree) with insert, search, and startsWith methods." },
            { "id": 2, "name": "Trie 2", "question": "Find the longest word in a dictionary that is a composition of other words." },
            { "id": 3, "name": "Trie 3", "question": "Find the maximum XOR of two numbers in an array." },
            { "id": 4, "name": "Trie 4", "question": "Find the maximum XOR with an element from an array for a given query." },
            { "id": 5, "name": "Surprise", "question": "How would you design an autocomplete system (like Google search suggestions) using a Trie?", "isSurprise": true }
        ]
    },
    {
        "id": "step-18-advanced",
        "name": "Step 18: Advanced Algorithms",
        "description": "Explore advanced data structures and algorithms.",
        "initialLives": 3,
        "levels": [
            { "id": 1, "name": "DSU 1", "question": "Implement Disjoint Set Union (DSU) by Rank and Path Compression." },
            { "id": 2, "name": "DSU 2", "question": "Use DSU to solve problems like finding connected components." },
            { "id": 3, "name": "Segment Tree 1", "question": "Implement a Segment Tree for range sum queries and point updates." },
            { "id": 4, "name": "Surprise", "question": "Explain Lazy Propagation in Segment Trees and when it is necessary.", "isSurprise": true }
        ]
    }
]
