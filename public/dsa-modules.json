
[
  {
    "id": "arrays",
    "name": "Arrays",
    "description": "Master the fundamental data structure for storing collections of elements.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "What is an array and how is it stored in memory?" },
      { "id": 2, "name": "2", "question": "Implement a function to reverse an array." },
      { "id": 3, "name": "3", "question": "Find the maximum and minimum element in an array." },
      { "id": 4, "name": "4", "question": "Solve the 'Two Sum' problem." },
      { "id": 5, "name": "S", "question": "Surprise array challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "strings",
    "name": "Strings",
    "description": "Learn to manipulate and process text-based data efficiently.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Explain string immutability." },
      { "id": 2, "name": "2", "question": "Check if a string is a palindrome." },
      { "id": 3, "name": "3", "question": "Find the first non-repeated character in a string." },
      { "id": 4, "name": "S", "question": "Surprise string challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "linked-lists",
    "name": "Linked Lists",
    "description": "Understand dynamic data structures with nodes and pointers.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "What is the difference between an array and a linked list?" },
      { "id": 2, "name": "2", "question": "Implement a singly linked list with insert and delete operations." },
      { "id": 3, "name": "3", "question": "Detect a cycle in a linked list." },
      { "id": 4, "name": "4", "question": "Reverse a linked list." },
      { "id": 5, "name": "S", "question": "Surprise linked list challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "stacks-queues",
    "name": "Stacks & Queues",
    "description": "Explore LIFO and FIFO principles with these essential data structures.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "Implement a stack using an array." },
      { "id": 2, "name": "2", "question": "Implement a queue using two stacks." },
      { "id": 3, "name": "3", "question": "Solve the 'Valid Parentheses' problem." },
      { "id": 4, "name": "S", "question": "Surprise stack/queue challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "recursion",
    "name": "Recursion",
    "description": "Dive into the art of solving problems by breaking them down into smaller, self-similar problems.",
    "initialLives": 3,
    "levels": [
        { "id": 1, "name": "1", "question": "What is a base case in recursion?" },
        { "id": 2, "name": "2", "question": "Calculate the factorial of a number using recursion." },
        { "id": 3, "name": "3", "question": "Explain tail recursion." },
        { "id": 4, "name": "S", "question": "Surprise recursion challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "trees",
    "name": "Trees",
    "description": "Navigate hierarchical data with binary trees, BSTs, and more.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "Define a binary search tree (BST)." },
      { "id": 2, "name": "2", "question": "Implement pre-order, in-order, and post-order traversals." },
      { "id": 3, "name": "3", "question": "Find the height of a binary tree." },
      { "id": 4, "name": "4", "question": "Check if a binary tree is a valid BST." },
      { "id": 5, "name": "S", "question": "Surprise tree challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "graphs",
    "name": "Graphs",
    "description": "Model complex networks and relationships with nodes and edges.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "Explain the difference between directed and undirected graphs." },
      { "id": 2, "name": "2", "question": "Implement Breadth-First Search (BFS)." },
      { "id": 3, "name": "3", "question": "Implement Depth-First Search (DFS)." },
      { "id": 4, "name": "4", "question": "Describe Dijkstra's algorithm for finding the shortest path." },
      { "id": 5, "name": "S", "question": "Surprise graph challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "hash-tables",
    "name": "Hash Tables",
    "description": "Learn about key-value lookups and collision handling.",
    "initialLives": 3,
    "levels": [
      { "id": 1, "name": "1", "question": "How does a hash table work?" },
      { "id": 2, "name": "2", "question": "Explain collision resolution techniques like chaining and open addressing." },
      { "id": 3, "name": "3", "question": "What makes a good hash function?" },
      { "id": 4, "name": "S", "question": "Surprise hash table challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "heaps",
    "name": "Heaps",
    "description": "Master priority queues with this specialized tree-based data structure.",
    "initialLives": 4,
    "levels": [
      { "id": 1, "name": "1", "question": "What is the difference between a min-heap and a max-heap?" },
      { "id": 2, "name": "2", "question": "Implement a min-heap with insert and extract-min operations." },
      { "id": 3, "name": "3", "question": "Explain the heapify procedure." },
      { "id": 4, "name": "S", "question": "Surprise heap challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "dynamic-programming",
    "name": "Dynamic Programming",
    "description": "Optimize solutions by storing the results of subproblems.",
    "initialLives": 5,
    "levels": [
      { "id": 1, "name": "1", "question": "What are the two key properties of a problem that suggests dynamic programming?" },
      { "id": 2, "name": "2", "question": "Explain the difference between memoization (top-down) and tabulation (bottom-up)." },
      { "id": 3, "name": "3", "question": "Solve the Fibonacci sequence using dynamic programming." },
      { "id": 4, "name": "S", "question": "Surprise DP challenge!", "isSurprise": true }
    ]
  },
    {
    "id": "sorting-searching",
    "name": "Sorting & Searching",
    "description": "Learn classic algorithms for organizing and finding data.",
    "initialLives": 4,
    "levels": [
      { "id": 1, "name": "1", "question": "Explain the time complexity of Bubble Sort, Merge Sort, and Quick Sort." },
      { "id": 2, "name": "2", "question": "Implement binary search." },
      { "id": 3, "name": "3", "question": "When would you use Merge Sort over Quick Sort?" },
      { "id": 4, "name": "S", "question": "Surprise sorting/searching challenge!", "isSurprise": true }
    ]
  },
  {
    "id": "bit-manipulation",
    "name": "Bit Manipulation",
    "description": "Work directly with bits and bytes for powerful optimizations.",
    "initialLives": 4,
    "levels": [
      { "id": 1, "name": "1", "question": "What are the common bitwise operators (AND, OR, XOR, NOT)?" },
      { "id": 2, "name": "2", "question": "Write a function to count the number of set bits in an integer." },
      { "id": 3, "name": "3", "question": "How can you use XOR to find the single unique number in an array where every other number appears twice?" },
      { "id": 4, "name": "S", "question": "Surprise bit manipulation challenge!", "isSurprise": true }
    ]
  }
]
