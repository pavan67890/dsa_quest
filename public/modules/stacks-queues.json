
[
  {
    "id": 1,
    "name": "1",
    "question": "Implement a Stack using an array.",
    "sampleInput": "Push 1, Push 2, Pop, Peek",
    "sampleOutput": "Pop returns 2, Peek returns 1"
  },
  {
    "id": 2,
    "name": "2",
    "question": "Implement a Queue using an array.",
    "sampleInput": "Enqueue 1, Enqueue 2, Dequeue, Peek",
    "sampleOutput": "Dequeue returns 1, Peek returns 2"
  },
  {
    "id": 3,
    "name": "3",
    "question": "Implement a Stack using a Queue.",
    "sampleInput": "Push 1, Push 2, Pop",
    "sampleOutput": "Pop returns 2"
  },
  {
    "id": 4,
    "name": "4",
    "question": "Implement a Queue using a Stack.",
    "sampleInput": "Enqueue 1, Enqueue 2, Dequeue",
    "sampleOutput": "Dequeue returns 1"
  },
  {
    "id": 5,
    "name": "5",
    "question": "Check for balanced parentheses in an expression.",
    "sampleInput": "'{([])}'",
    "sampleOutput": "true"
  },
  {
    "id": 6,
    "name": "6",
    "question": "Implement a Min Stack that supports push, pop, top, and retrieving the minimum element in constant time.",
    "sampleInput": "Push -2, Push 0, Push -3, GetMin, Pop, Top, GetMin",
    "sampleOutput": "-3, 0, -2"
  },
  {
    "id": 7,
    "name": "7",
    "isSurprise": true,
    "question": "Surprise! A medium stack/queue problem."
  },
  {
    "id": 8,
    "name": "8",
    "question": "Next Greater Element I.",
    "sampleInput": "nums1 = [4,1,2], nums2 = [1,3,4,2]",
    "sampleOutput": "[-1, 3, -1]"
  },
  {
    "id": 9,
    "name": "9",
    "question": "Next Greater Element II (circular array).",
    "sampleInput": "[1, 2, 1]",
    "sampleOutput": "[2, -1, 2]"
  },
  {
    "id": 10,
    "name": "10",
    "question": "Next Smaller Element.",
    "sampleInput": "[4, 5, 2, 10, 8]",
    "sampleOutput": "[2, 2, -1, 8, -1]"
  },
  {
    "id": 11,
    "name": "11",
    "question": "LRU Cache: Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.",
    "sampleInput": "Various put and get operations",
    "sampleOutput": "Correct values returned, correct items evicted"
  },
  {
    "id": 12,
    "name": "12",
    "question": "LFU Cache: Design and implement a data structure for a Least Frequently Used (LFU) cache.",
    "sampleInput": "Various put and get operations",
    "sampleOutput": "Correct values returned, correct items evicted"
  },
  {
    "id": 13,
    "name": "13",
    "question": "Largest Rectangle in Histogram.",
    "sampleInput": "heights = [2, 1, 5, 6, 2, 3]",
    "sampleOutput": "10"
  },
  {
    "id": 14,
    "name": "14",
    "question": "Sliding Window Maximum.",
    "sampleInput": "nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3",
    "sampleOutput": "[3, 3, 5, 5, 6, 7]"
  },
  {
    "id": 15,
    "name": "15",
    "question": "Stock Span Problem.",
    "sampleInput": "[100, 80, 60, 70, 60, 75, 85]",
    "sampleOutput": "[1, 1, 1, 2, 1, 4, 6]"
  },
  {
    "id": 16,
    "name": "16",
    "question": "The Celebrity Problem.",
    "sampleInput": "A matrix where M[i][j] = 1 if i knows j.",
    "sampleOutput": "The index of the celebrity or -1."
  },
  {
    "id": 17,
    "name": "17",
    "question": "Maximum of minimum for every window size.",
    "sampleInput": "[10, 20, 30, 50, 10, 70, 30]",
    "sampleOutput": "[70, 30, 20, 10, 10, 10, 10]"
  },
  {
    "id": 18,
    "name": "18",
    "question": "Trapping Rain Water.",
    "sampleInput": "[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]",
    "sampleOutput": "6"
  },
  {
    "id": 19,
    "name": "19",
    "question": "Sum of Subarray Minimums.",
    "sampleInput": "[3, 1, 2, 4]",
    "sampleOutput": "17"
  },
  {
    "id": 20,
    "name": "20",
    "isSurprise": true,
    "question": "Surprise! A hard stack/queue problem."
  }
]
