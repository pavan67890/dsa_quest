
export interface Level {
  id: number;
  name: string;
  question: string;
  isSurprise?: boolean;
}

export interface Module {
  id: string;
  name: string;
  description: string;
  initialLives: number;
  levels: Level[];
}

export const dsaModules: Module[] = [
    {
        id: 'step-1-basics',
        name: 'Step 1: Learn The Basics',
        description: 'Build a strong foundation with core programming concepts.',
        initialLives: 5,
        levels: [
            { id: 1, name: 'L1', question: 'Explain how to take user input and display output in your preferred language.' },
            { id: 2, name: 'L2', question: 'Differentiate between primitive and non-primitive data types.' },
            { id: 3, name: 'L3', question: 'Solve a problem using if-else statements.' },
            { id: 4, name: 'L4', question: 'When is a switch statement preferred over an if-else chain? Give an example.' },
            { id: 5, name: 'L5', question: 'Explain the fundamental differences between arrays and strings.' },
            { id: 6, name: 'L6', question: 'Write a `for` loop to accomplish a specific task, like printing numbers.' },
            { id: 7, name: 'L7', question: 'Write a `while` loop to solve a problem, for example, reversing a number.' },
            { id: 8, name: 'L8', question: 'What are functions, and what is the difference between pass-by-value and pass-by-reference?' },
            { id: 9, name: 'L9', question: 'Explain Time and Space Complexity with an example of a simple algorithm.' },
            { id: 10, name: 'L10', question: 'Count Digits in a number.' },
            { id: 11, name: 'L11', question: 'Reverse a Number.' },
            { id: 12, name: 'L12', question: 'Check if a number is Palindrome.' },
            { id: 13, name: 'L13', question: 'Find GCD of two numbers.' },
            { id: 14, name: 'L14', question: 'Check if a number is an Armstrong Number.' },
            { id: 15, name: 'L15', question: 'Print all Divisors of a number.' },
            { id: 16, name: 'L16', question: 'Check if a number is Prime.' },
            { id: 17, name: 'L17', question: 'Explain basic hashing concepts, including collision handling.' },
            { id: 18, name: 'L18', question: 'Count frequency of each element in an array using hashing.' },
            { id: 19, name: 'L19', question: 'Find the highest and lowest frequency elements in an array.' },
            { id: 20, name: 'Surprise', question: 'Explain the concept of recursion and its components (base case, recursive step).', isSurprise: true },
        ],
    },
    {
        id: 'step-2-sorting',
        name: 'Step 2: Sorting Techniques',
        description: 'Master fundamental sorting algorithms and their complexities.',
        initialLives: 5,
        levels: [
            { id: 1, name: 'L1', question: 'Explain and implement Selection Sort.' },
            { id: 2, name: 'L2', question: 'Explain and implement Bubble Sort.' },
            { id: 3, name: 'L3', question: 'Explain and implement Insertion Sort.' },
            { id: 4, name: 'L4', question: 'Explain the logic behind Merge Sort and implement it.' },
            { id: 5, name: 'L5', question: 'Explain and implement Quick Sort.' },
            { id: 6, name: 'L6', question: 'Implement recursive Bubble Sort.' },
            { id: 7, name: 'L7', question: 'Implement recursive Insertion Sort.' },
            { id: 8, name: 'Surprise', question: 'What are stable and unstable sorting algorithms? Give examples.', isSurprise: true },
        ],
    },
    {
        id: 'step-3-arrays',
        name: 'Step 3: Problems on Arrays',
        description: 'Solve a variety of problems on arrays, from easy to hard, to build a strong foundation.',
        initialLives: 5,
        levels: [
            { id: 1, name: 'Easy 1', question: 'Find the largest element in an array.' },
            { id: 2, name: 'Easy 2', question: 'Find the second largest and second smallest element in an array.' },
            { id: 3, name: 'Easy 3', question: 'Check if an array is sorted.' },
            { id: 4, name: 'Easy 4', question: 'Remove duplicates from a sorted array in-place.' },
            { id: 5, name: 'Easy 5', question: 'Left rotate an array by one place.' },
            { id: 6, name: 'Easy 6', question: 'Left rotate an array by D places.' },
            { id: 7, name: 'Easy 7', question: 'Move all zeros to the end of the array.' },
            { id: 8, name: 'Easy 8', question: 'Find the union of two sorted arrays.' },
            { id: 9, name: 'Easy 9', question: 'Find the missing number in an array of N-1 integers from 1 to N.' },
            { id: 10, name: 'Easy 10', question: 'Find the maximum number of consecutive 1s in a binary array.' },
            { id: 11, name: 'Easy 11', question: 'Find the number that appears once, while every other number appears twice.' },
            { id: 12, name: 'Medium 1', question: 'Find the indices of two numbers that add up to a specific target (Two Sum Problem).' },
            { id: 13, name: 'Medium 2', question: 'Sort an array of 0s, 1s, and 2s (Dutch National Flag Algorithm).' },
            { id: 14, name: 'Medium 3', question: 'Find the element that appears more than N/2 times (Majority Element).' },
            { id: 15, name: 'Medium 4', question: 'Find the maximum sum of a contiguous subarray (Kadane\'s Algorithm).' },
            { id: 16, name: 'Medium 5', question: 'Stock Buy and Sell: Find the maximum profit.' },
            { id: 17, name: 'Medium 6', question: 'Rearrange an array with positive and negative numbers such that they alternate.' },
            { id: 18, name: 'Medium 7', question: 'Generate the next lexicographically greater permutation of a given array.' },
            { id: 19, name: 'Medium 8', question: 'Find the leaders in an array (elements greater than all elements to their right).' },
            { id: 20, name: 'Medium 9', question: 'Find the longest consecutive sequence of elements in an array.' },
            { id: 21, name: 'Medium 10', question: 'Given a matrix, set the entire row and column to 0 if an element is 0.' },
            { id: 22, name: 'Medium 11', question: 'Rotate a square matrix by 90 degrees in-place.' },
            { id: 23, name: 'Medium 12', question: 'Print the elements of a matrix in a spiral order.' },
            { id: 24, name: 'Hard 1', question: 'Generate Pascal\'s Triangle or a specific row from it.' },
            { id: 25, name: 'Hard 2', question: 'Find all elements that appear more than N/3 times.' },
            { id: 26, name: 'Hard 3', question: 'Find all unique triplets in an array that sum up to zero (3-Sum Problem).' },
            { id: 27, name: 'Hard 4', question: 'Find all unique quadruplets that sum up to a target value (4-Sum Problem).' },
            { id: 28, name: 'Hard 5', question: 'Find the length of the largest subarray with a sum of 0.' },
            { id: 29, name: 'Hard 6', question: 'Count the number of subarrays with a given XOR K.' },
            { id: 30, name: 'Hard 7', question: 'Merge overlapping sub-intervals.' },
            { id: 31, name: 'Hard 8', question: 'Merge two sorted arrays without using extra space.' },
            { id: 32, name: 'Hard 9', question: 'Find the repeating and missing numbers in an array.' },
            { id: 33, name: 'Hard 10', question: 'Count inversions in an array.' },
            { id: 34, name: 'Hard 11', question: 'Find all reverse pairs in an array.' },
            { id: 35, name: 'Hard 12', question: 'Find the maximum product of a contiguous subarray.' },
            { id: 36, name: 'Surprise', question: 'Compare the approaches for solving the Two Sum problem (brute-force, hashing, two-pointers).', isSurprise: true },
        ],
    },
    {
        id: 'step-4-binary-search',
        name: 'Step 4: Binary Search',
        description: 'Learn binary search on 1D/2D arrays and its application in search spaces.',
        initialLives: 3,
        levels: [
            { id: 1, name: '1D L1', question: 'Implement binary search to find a target in a sorted array.' },
            { id: 2, name: '1D L2', question: 'Implement a function to find the lower bound of a number in a sorted array.' },
            { id: 3, name: '1D L3', question: 'Implement a function to find the upper bound of a number in a sorted array.' },
            { id: 4, name: '1D L4', question: 'Find the first and last occurrence of a number in a sorted array.' },
            { id: 5, name: '1D L5', question: 'Count occurrences of a number in a sorted array.' },
            { id: 6, name: '1D L6', question: 'Find a peak element in an array.' },
            { id: 7, name: '1D L7', question: 'Search for an element in a rotated sorted array with unique elements.' },
            { id: 8, name: '1D L8', question: 'Search for an element in a rotated sorted array with duplicate elements.' },
            { id: 9, name: '1D L9', question: 'Find the minimum element in a rotated sorted array.' },
            { id: 10, name: '1D L10', question: 'Find how many times an array has been rotated.' },
            { id: 11, name: '1D L11', question: 'Find a single element in a sorted array where every element appears twice except for one.' },
            { id: 12, name: '2D L1', question: 'Search for a target in a 2D matrix where rows and columns are sorted.' },
            { id: 13, name: '2D L2', question: 'Find the peak element in a 2D matrix.' },
            { id: 14, name: '2D L3', question: 'Find the median in a row-wise sorted matrix.' },
            { id: 15, name: 'Space 1', question: 'Find the square root of a number using binary search.' },
            { id: 16, name: 'Space 2', question: 'Find the Nth root of a number using binary search.' },
            { id: 17, name: 'Space 3', question: 'Koko Eating Bananas: Find the minimum eating speed.' },
            { id: 18, name: 'Space 4', question: 'Minimum days to make M bouquets.' },
            { id: 19, name: 'Space 5', question: 'Find the smallest divisor given a threshold.' },
            { id: 20, name: 'Space 6', question: 'Capacity to ship packages within D days.' },
            { id: 21, name: 'Space 7', question: 'Find the k-th missing positive number.' },
            { id: 22, name: 'Space 8', question: 'Aggressive Cows: Place cows with maximum possible minimum distance.' },
            { id: 23, name: 'Space 9', question: 'Book Allocation Problem.' },
            { id: 24, name: 'Space 10', question: 'Split array - Largest Sum.' },
            { id: 25, name: 'Space 11', question: 'Median of two sorted arrays.' },
            { id: 26, name: 'Space 12', question: 'Find the k-th element of two sorted arrays.' },
            { id: 27, name: 'Surprise', question: 'When can you apply binary search on the answer space? Explain the pattern.', isSurprise: true },
        ],
    },
    {
        id: 'step-5-strings',
        name: 'Step 5: Strings',
        description: 'Dive into string algorithms, pattern matching, and manipulation.',
        initialLives: 5,
        levels: [
            { id: 1, name: 'Easy 1', question: 'Remove the outermost parentheses.' },
            { id: 2, name: 'Easy 2', question: 'Reverse words in a given string.' },
            { id: 3, name: 'Easy 3', question: 'Find the largest odd number in a string.' },
            { id: 4, name: 'Easy 4', question: 'Find the longest common prefix among an array of strings.' },
            { id: 5, name: 'Easy 5', question: 'Check if two strings are isomorphic.' },
            { id: 6, name: 'Easy 6', question: 'Check if one string is a rotation of another.' },
            { id: 7, name: 'Easy 7', question: 'Check if two strings are anagrams of each other.' },
            { id: 8, name: 'Easy 8', question: 'Sort characters by frequency.' },
            { id: 9, name: 'Medium 1', question: 'Implement `atoi` to convert a string to an integer.' },
            { id: 10, name: 'Medium 2', question: 'Count number of substrings with at most K distinct characters.' },
            { id: 11, name: 'Medium 3', question: 'Find the length of the longest substring without repeating characters.' },
            { id: 12, name: 'Medium 4', question: 'Roman to Integer conversion.' },
            { id: 13, name: 'Medium 5', question: 'Implement string to integer (myAtoi).' },
            { id: 14, name: 'Medium 6', question: 'Find the length of the longest palindromic substring.' },
            { id: 15, name: 'Medium 7', question: 'Sum of beauty of all substrings.' },
            { id: 16, name: 'Hard 1', question: 'Generate all valid parentheses.' },
            { id: 17, name: 'Hard 2', question: 'Find the minimum window substring.' },
            { id: 18, name: 'Hard 3', question: 'Find the minimum number of insertions to make a string palindrome.' },
            { id: 19, name: 'Surprise', question: 'Explain the KMP (Knuth-Morris-Pratt) algorithm for pattern searching.', isSurprise: true },
        ],
    },
    {
        id: 'step-6-linked-list',
        name: 'Step 6: Linked List',
        description: 'Master operations on singly, doubly, and circular linked lists.',
        initialLives: 5,
        levels: [
            { id: 1, name: 'Easy 1', question: 'Introduction to Linked List: Implement a node.' },
            { id: 2, name: 'Easy 2', question: 'Implement a singly linked list with insert and delete operations.' },
            { id: 3, name: 'Easy 3', question: 'Implement a doubly linked list.' },
            { id: 4, name: 'Easy 4', question: 'Insert a node in a doubly linked list.' },
            { id: 5, name: 'Easy 5', question: 'Delete a node from a doubly linked list.' },
            { id: 6, name: 'Easy 6', question: 'Reverse a doubly linked list.' },
            { id: 7, name: 'Medium 1', question: 'Find the middle of a linked list.' },
            { id: 8, name: 'Medium 2', question: 'Reverse a linked list (iterative and recursive).' },
            { id: 9, name: 'Medium 3', question: 'Detect a cycle in a linked list.' },
            { id: 10, name: 'Medium 4', question: 'Find the length of the loop in a linked list.' },
            { id: 11, name: 'Medium 5', question: 'Find the starting point of a loop in a linked list.' },
            { id: 12, name: 'Medium 6', question: 'Check if a linked list is a palindrome.' },
            { id: 13, name: 'Medium 7', question: 'Segregate odd and even nodes in a linked list.' },
            { id: 14, name: 'Medium 8', question: 'Remove the Nth node from the end of a linked list.' },
            { id: 15, name: 'Medium 9', question: 'Delete the middle node of a linked list.' },
            { id: 16, name: 'Medium 10', question: 'Sort a linked list.' },
            { id: 17, name: 'Medium 11', question: 'Sort a linked list of 0s, 1s, and 2s.' },
            { id: 18, name: 'Medium 12', question: 'Add two numbers represented by linked lists.' },
            { id: 19, name: 'Medium 13', question: 'Find the intersection of two linked lists.' },
            { id: 20, name: 'Hard 1', question: 'Reverse a linked list in groups of size K.' },
            { id: 21, name: 'Hard 2', question: 'Rotate a linked list by K places.' },
            { id: 22, name: 'Hard 3', question: 'Clone a linked list with next and random pointers.' },
            { id: 23, name: 'Hard 4', question: 'Flatten a multilevel linked list.' },
            { id: 24, name: 'Surprise', question: 'Design a data structure for a Least Recently Used (LRU) cache using a doubly linked list and a hash map.', isSurprise: true },
        ],
    },
    {
        id: 'step-7-recursion',
        name: 'Step 7: Recursion',
        description: 'Understand and apply recursion to solve complex problems.',
        initialLives: 3,
        levels: [
            { id: 1, name: 'L1', question: 'Print numbers from 1 to N using recursion.' },
            { id: 2, name: 'L2', question: 'Print name N times using recursion.' },
            { id: 3, name: 'L3', question: 'Print numbers from N to 1 using recursion.' },
            { id: 4, name: 'L4', question: 'Sum of first N numbers (parameterized and functional recursion).' },
            { id: 5, name: 'L5', question: 'Reverse an array using recursion.' },
            { id: 6, name: 'L6', question: 'Check if a string is a palindrome using recursion.' },
            { id: 7, name: 'L7', question: 'Print Fibonacci numbers using recursion.' },
            { id: 8, name: 'L8', question: 'Print all subsequences of a string.' },
            { id: 9, name: 'L9', question: 'Print all subsequences with sum K.' },
            { id: 10, name: 'L10', question: 'Combination Sum I.' },
            { id: 11, name: 'L11', question: 'Combination Sum II.' },
            { id: 12, name: 'L12', question: 'Subset Sum I.' },
            { id: 13, name: 'L13', question: 'Subset Sum II.' },
            { id: 14, name: 'L14', question: 'Generate all permutations of a string/array.' },
            { id: 15, name: 'L15', question: 'N-Queens problem.' },
            { id: 16, name: 'L16', question: 'Sudoku Solver.' },
            { id: 17, name: 'L17', question: 'Rat in a Maze.' },
            { id: 18, name: 'L18', question: 'Word Break problem.' },
            { id: 19, name: 'Surprise', question: 'Explain the difference between recursion and backtracking with a clear example.', isSurprise: true },
        ],
    },
    {
        id: 'step-8-bit-manipulation',
        name: 'Step 8: Bit Manipulation',
        description: 'Learn bitwise operators and solve problems using bit manipulation techniques.',
        initialLives: 3,
        levels: [
            { id: 1, name: 'L1', question: 'Introduction to Bit Manipulation: Explain bitwise operators (AND, OR, XOR, NOT, Left Shift, Right Shift).' },
            { id: 2, name: 'L2', question: 'Check if the i-th bit is set (1) or not.' },
            { id: 3, name: 'L3', question: 'Set the i-th bit of a number.' },
            { id: 4, name: 'L4', question: 'Clear the i-th bit of a number.' },
            { id: 5, name: 'L5', question: 'Toggle the i-th bit of a number.' },
            { id: 6, name: 'L6', question: 'Check if a number is a power of 2.' },
            { id: 7, name: 'L7', question: 'Count the number of set bits in a number (Brian Kernighan\'s algorithm).' },
            { id: 8, name: 'L8', question: 'Find the two numbers that appear only once in an array where all other numbers appear twice.' },
            { id: 9, name: 'L9', question: 'Find the number that appears only once in an array where all other numbers appear three times.' },
            { id: 10, name: 'L10', question: 'Generate the power set (all subsets) of a given set using bit manipulation.' },
            { id: 11, name: 'L11', question: 'Find XOR of numbers from L to R.' },
            { id: 12, name: 'Surprise', question: 'How can you swap two numbers without using a temporary variable? Explain with bitwise operators.', isSurprise: true },
        ]
    },
    {
        id: 'step-9-stacks-queues',
        name: 'Step 9: Stacks & Queues',
        description: 'Learn about LIFO and FIFO data structures and their applications.',
        initialLives: 4,
        levels: [
            { id: 1, name: 'L1', question: 'Implement a stack using an array.' },
            { id: 2, name: 'L2', question: 'Implement a queue using an array.' },
            { id: 3, name: 'L3', question: 'Implement a stack using a linked list.' },
            { id: 4, name: 'L4', question: 'Implement a queue using a linked list.' },
            { id: 5, name: 'L5', question: 'Implement a stack using two queues.' },
            { id: 6, name: 'L6', question: 'Implement a queue using two stacks.' },
            { id: 7, name: 'L7', question: 'Check for balanced parentheses in an expression.' },
            { id: 8, name: 'L8', question: 'Find the next greater element for each element in an array.' },
            { id: 9, name: 'L9', question: 'Find the next smaller element for each element in an array.' },
            { id: 10, name: 'L10', question: 'Find the largest rectangular area in a histogram.' },
            { id: 11, name: 'L11', question: 'Implement a Min Stack supporting push, pop, top, and getMin in O(1) time.' },
            { id: 12, name: 'L12', question: 'Implement an LRU Cache.' },
            { id: 13, name: 'L13', question: 'Implement an LFU Cache.' },
            { id: 14, name: 'L14', question: 'Find the maximum of minimums of every window size.' },
            { id: 15, name: 'Surprise', question: 'Explain the "stock span" problem and how it can be solved efficiently using a stack.', isSurprise: true },
        ]
    },
    {
        id: 'step-10-sliding-window',
        name: 'Step 10: Sliding Window & Two Pointers',
        description: 'Master techniques for solving array and string problems efficiently.',
        initialLives: 4,
        levels: [
            { id: 1, name: 'Hard 1', question: 'Find the maximum of all subarrays of size k (Sliding Window Maximum).' },
            { id: 2, name: 'Hard 2', question: 'Count the number of subarrays with a given sum.' },
            { id: 3, name: 'Hard 3', question: 'Find the length of the longest substring with at most K distinct characters.' },
            { id: 4, name: 'Hard 4', question: 'Find the length of the longest substring with no repeating characters.' },
            { id: 5, name: 'Hard 5', question: 'Find the minimum window substring that contains all characters of another string.' },
            { id: 6, name: 'Hard 6', question: 'Find the length of the longest repeating character replacement.' },
            { id: 7, name: 'Medium 1', question: 'Trapping Rain Water.' },
            { id: 8, name: 'Medium 2', question: 'Remove duplicates from a sorted array (Two Pointers).' },
            { id: 9, name: 'Medium 3', question: 'Max consecutive ones with at most k zeros.' },
            { id: 10, name: 'Easy 1', question: 'Container with most water.' },
            { id: 11, name: 'Surprise', question: 'What is the "Caterpillar Method" and how does it relate to the two-pointer technique?', isSurprise: true },
        ]
    },
    {
        id: 'step-11-heaps',
        name: 'Step 11: Heaps',
        description: 'Understand priority queues and solve problems using Min-Heap and Max-Heap.',
        initialLives: 3,
        levels: [
            { id: 1, name: 'L1', question: 'Explain what a heap is and the difference between a Min-Heap and a Max-Heap.' },
            { id: 2, name: 'L2', question: 'Implement a Priority Queue (Min-Heap and Max-Heap).' },
            { id: 3, name: 'L3', question: 'Convert a given array into a Max-Heap (Heapify).' },
            { id: 4, name: 'L4', question: 'Implement Heap Sort.' },
            { id: 5, name: 'L5', question: 'Find the k-th largest element in an array using a heap.' },
            { id: 6, name: 'L6', question: 'Find the k-th smallest element in an array using a heap.' },
            { id: 7, name: 'L7', question: 'Find the median from a data stream using two heaps.' },
            { id: 8, name: 'L8', question: 'Merge K sorted arrays.' },
            { id: 9, name: 'L9', question: 'Merge K sorted linked lists.' },
            { id: 10, name: 'Surprise', question: 'Design a system to find the top K most frequent elements in a stream of data.', isSurprise: true },
        ]
    },
    {
        id: 'step-12-greedy',
        name: 'Step 12: Greedy Algorithms',
        description: 'Learn the greedy approach to find optimal solutions by making locally optimal choices.',
        initialLives: 3,
        levels: [
            { id: 1, name: 'L1', question: 'Assign cookies problem.' },
            { id: 2, name: 'L2', question: 'Fractional Knapsack problem.' },
            { id: 3, name: 'L3', question: 'Find the minimum number of coins to make a given value.' },
            { id: 4, name: 'L4', question: 'Activity Selection problem (N meetings in one room).' },
            { id: 5, name: 'L5', question: 'Jump Game.' },
            { id: 6, name: 'L6', question: 'Jump Game II.' },
            { id: 7, name: 'L7', question: 'Job Sequencing Problem.' },
            { id: 8, name: 'Surprise', question: 'When does a greedy approach fail to produce a globally optimal solution? Provide an example.', isSurprise: true },
        ]
    },
    {
        id: 'step-13-trees',
        name: 'Step 13: Binary Trees',
        description: 'Master traversals, views, and complex problems on Binary Trees.',
        initialLives: 5,
        levels: [
            { id: 1, name: 'T1', question: 'Implement a Binary Tree node.' },
            { id: 2, name: 'T2', question: 'Implement pre-order traversal (recursive and iterative).' },
            { id: 3, name: 'T3', question: 'Implement in-order traversal (recursive and iterative).' },
            { id: 4, name: 'T4', question: 'Implement post-order traversal (recursive and iterative).' },
            { id: 5, name: 'T5', question: 'Implement level-order traversal.' },
            { id: 6, name: 'T6', question: 'Find the maximum depth (height) of a binary tree.' },
            { id: 7, name: 'T7', question: 'Check if a binary tree is balanced.' },
            { id: 8, name: 'T8', question: 'Find the diameter of a binary tree.' },
            { id: 9, name: 'T9', question: 'Find the maximum path sum in a binary tree.' },
            { id: 10, name: 'T10', question: 'Check if two binary trees are identical.' },
            { id: 11, name: 'T11', question: 'Implement Zigzag (Spiral) Level Order Traversal.' },
            { id: 12, name: 'T12', question: 'Find the boundary traversal of a binary tree.' },
            { id: 13, name: 'T13', question: 'Implement the vertical order traversal of a binary tree.' },
            { id: 14, name: 'T14', question: 'Implement the top view of a binary tree.' },
            { id: 15, name: 'T15', question: 'Implement the bottom view of a binary tree.' },
            { id: 16, name: 'T16', question: 'Implement the right view of a binary tree.' },
            { id: 17, name: 'T17', question: 'Implement the left view of a binary tree.' },
            { id: 18, name: 'T18', question: 'Check if a binary tree is symmetric.' },
            { id: 19, name: 'T19', question: 'Find the lowest common ancestor (LCA) of two nodes in a binary tree.' },
            { id: 20, name: 'T20', question: 'Find the maximum width of a binary tree.' },
            { id: 21, name: 'T21', question: 'Find all nodes at distance K from a given node.' },
            { id: 22, name: 'T22', question: 'Construct a binary tree from preorder and inorder traversal.' },
            { id: 23, name: 'T23', question: 'Construct a binary tree from postorder and inorder traversal.' },
            { id: 24, name: 'T24', question: 'Serialize and deserialize a binary tree.' },
            { id: 25, name: 'T25', question: 'Flatten a binary tree to a linked list.' },
            { id: 26, name: 'Surprise', question: 'Explain Morris Traversal and its advantages over recursive/iterative traversals.', isSurprise: true },
        ]
    },
    {
        id: 'step-14-bst',
        name: 'Step 14: Binary Search Trees',
        description: 'Explore properties and problems related to Binary Search Trees.',
        initialLives: 4,
        levels: [
            { id: 1, name: 'BST 1', question: 'Search for a value in a Binary Search Tree.' },
            { id: 2, name: 'BST 2', question: 'Find the floor and ceil of a key in a BST.' },
            { id: 3, name: 'BST 3', question: 'Insert a node into a BST.' },
            { id: 4, name: 'BST 4', question: 'Delete a node from a BST.' },
            { id: 5, name: 'BST 5', question: 'Find the k-th smallest element in a BST.' },
            { id: 6, name: 'BST 6', question: 'Find the k-th largest element in a BST.' },
            { id: 7, name: 'BST 7', question: 'Validate if a given binary tree is a Binary Search Tree.' },
            { id: 8, name: 'BST 8', question: 'Find the Lowest Common Ancestor (LCA) of two nodes in a BST.' },
            { id: 9, name: 'BST 9', question: 'Construct a BST from a preorder traversal.' },
            { id: 10, name: 'BST 10', question: 'Find the inorder successor/predecessor of a given node in a BST.' },
            { id: 11, name: 'BST 11', question: 'Implement a BST iterator (next and hasNext).' },
            { id: 12, name: 'BST 12', question: 'Find a pair with a given sum in a BST.' },
            { id: 13, name: 'BST 13', question: 'Recover a BST where two nodes are swapped.' },
            { id: 14, name: 'BST 14', question: 'Find the largest BST subtree in a given binary tree.' },
            { id: 15, name: 'Surprise', question: 'What is a self-balancing BST (like AVL or Red-Black Tree) and why is it important?', isSurprise: true },
        ]
    },
    {
        id: 'step-15-graphs',
        name: 'Step 15: Graphs',
        description: 'Learn graph representations, traversal algorithms, and common graph problems.',
        initialLives: 5,
        levels: [
            { id: 1, name: 'G1', question: 'Explain how to represent a graph using an adjacency matrix and an adjacency list.' },
            { id: 2, name: 'G2', question: 'Implement Breadth-First Search (BFS) for a graph.' },
            { id: 3, name: 'G3', question: 'Implement Depth-First Search (DFS) for a graph.' },
            { id: 4, name: 'G4', question: 'Count the number of provinces (connected components) in a graph.' },
            { id: 5, name: 'G5', question: 'Perform a flood fill algorithm.' },
            { id: 6, name: 'G6', question: 'Find if a path exists in a graph.' },
            { id: 7, name: 'G7', question: 'Detect a cycle in an undirected graph (BFS and DFS).' },
            { id: 8, name: 'G8', question: 'Distance of nearest cell having 1 in a binary matrix.' },
            { id: 9, name: 'G9', question: 'Surrounded Regions (O/X problem).' },
            { id: 10, name: 'G10', question: 'Number of Enclaves.' },
            { id: 11, name: 'G11', question: 'Word Ladder I and II.' },
            { id: 12, name: 'G12', question: 'Number of islands.' },
            { id: 13, name: 'G13', question: 'Check if a graph is bipartite (BFS and DFS).' },
            { id: 14, name: 'G14', question: 'Detect a cycle in a directed graph using DFS.' },
            { id: 15, name: 'G15', question: 'Eventual Safe States.' },
            { id: 16, name: 'G16', question: 'Implement Topological Sort (BFS - Kahn\'s Algorithm).' },
            { id: 17, name: 'G17', question: 'Implement Topological Sort (DFS).' },
            { id: 18, name: 'G18', question: 'Find evental safe states.' },
            { id: 19, name: 'G19', question: 'Course Schedule I and II.' },
            { id: 20, name: 'G20', question: 'Find the prerequisite tasks.' },
            { id: 21, name: 'G21', question: 'Find the city with the smallest number of neighbors at a threshold distance.' },
            { id: 22, name: 'G22', question: 'Implement Dijkstra\'s Algorithm using a Priority Queue.' },
            { id: 23, name: 'G23', question: 'Find the shortest path in a binary maze.' },
            { id: 24, name: 'G24', question: 'Path with minimum effort.' },
            { id: 25, name: 'G25', question: 'Cheapest flights within K stops.' },
            { id: 26, name: 'G26', question: 'Implement Bellman-Ford algorithm.' },
            { id: 27, name: 'G27', question: 'Implement Floyd-Warshall algorithm.' },
            { id: 28, name: 'G28', question: 'Implement Prim\'s algorithm for Minimum Spanning Tree.' },
            { id: 29, name: 'G29', question: 'Implement Kruskal\'s algorithm for Minimum Spanning Tree.' },
            { id: 30, name: 'G30', question: 'Find the number of operations to make a network connected.' },
            { id: 31, name: 'G31', question: 'Find bridges in a graph.' },
            { id: 32, name: 'G32', question: 'Find articulation points in a graph.' },
            { id: 33, name: 'G33', question: 'Implement Kosaraju\'s algorithm for strongly connected components.' },
            { id: 34, name: 'Surprise', question: 'Compare and contrast Dijkstra\'s, Bellman-Ford, and Floyd-Warshall algorithms.', isSurprise: true },
        ]
    },
    {
        id: 'step-16-dp',
        name: 'Step 16: Dynamic Programming',
        description: 'Master DP by solving problems from 1D to multidimensional.',
        initialLives: 3,
        levels: [
            { id: 1, name: '1D-1', question: 'Find the N-th Fibonacci number using DP (memoization and tabulation).' },
            { id: 2, name: '1D-2', question: 'Climbing Stairs.' },
            { id: 3, name: '1D-3', question: 'Frog Jump problem.' },
            { id: 4, name: '1D-4', question: 'Maximum sum of non-adjacent elements (House Robber).' },
            { id: 5, name: '1D-5', question: 'House Robber II.' },
            { id: 6, name: '2D-1', question: 'Ninja\'s Training.' },
            { id: 7, name: '2D-2', question: 'Find the number of unique paths in a grid.' },
            { id: 8, name: '2D-3', question: 'Find unique paths with obstacles.' },
            { id: 9, name: '2D-4', question: 'Find the minimum path sum in a grid.' },
            { id: 10, name: '2D-5', question: 'Find the minimum path sum in a triangle.' },
            { id: 11, name: '2D-6', question: 'Minimum/Maximum falling path sum.' },
            { id: 12, name: 'Subseq-1', question: 'Subset Sum Equal to Target.' },
            { id: 13, name: 'Subseq-2', question: 'Partition Equal Subset Sum.' },
            { id: 14, name: 'Subseq-3', question: 'Partition a set into two subsets with minimum absolute difference.' },
            { id: 15, name: 'Subseq-4', question: 'Count subsets with sum K.' },
            { id: 16, name: 'Subseq-5', question: 'Count partitions with given difference.' },
            { id: 17, name: 'Subseq-6', question: '0/1 Knapsack problem.' },
            { id: 18, name: 'Subseq-7', question: 'Coin Change.' },
            { id: 19, name: 'Subseq-8', question: 'Target Sum.' },
            { id: 20, name: 'Subseq-9', question: 'Unbounded Knapsack.' },
            { id: 21, name: 'Subseq-10', question: 'Rod Cutting problem.' },
            { id: 22, name: 'Strings-1', question: 'Find the Longest Common Subsequence (LCS).' },
            { id: 23, name: 'Strings-2', question: 'Print the Longest Common Subsequence.' },
            { id: 24, name: 'Strings-3', question: 'Find the Longest Common Substring.' },
            { id: 25, name: 'Strings-4', question: 'Find the Longest Palindromic Subsequence.' },
            { id: 26, name: 'Strings-5', question: 'Find the minimum insertions to make a string palindrome.' },
            { id: 27, name: 'Strings-6', question: 'Find the minimum insertions/deletions to convert string A to string B.' },
            { id: 28, name: 'Strings-7', question: 'Shortest Common Supersequence.' },
            { id: 29, name: 'Strings-8', question: 'Distinct Subsequences.' },
            { id: 30, name: 'Strings-9', question: 'Edit Distance.' },
            { id: 31, name: 'Strings-10', question: 'Wildcard Matching.' },
            { id: 32, name: 'Stocks-1', question: 'Best time to buy and sell stock.' },
            { id: 33, name: 'Stocks-2', question: 'Best time to buy and sell stock II.' },
            { id: 34, name: 'Stocks-3', question: 'Best time to buy and sell stock III.' },
            { id: 35, name: 'Stocks-4', question: 'Best time to buy and sell stock IV.' },
            { id: 36, name: 'Stocks-5', question: 'Best time to buy and sell stock with cooldown.' },
            { id: 37, name: 'Stocks-6', question: 'Best time to buy and sell stock with transaction fee.' },
            { id: 38, name: 'LIS-1', question: 'Longest Increasing Subsequence (LIS).' },
            { id: 39, name: 'LIS-2', question: 'Print the Longest Increasing Subsequence.' },
            { id: 40, name: 'LIS-3', question: 'Largest Divisible Subset.' },
            { id: 41, name: 'LIS-4', question: 'Longest String Chain.' },
            { id: 42, name: 'LIS-5', question: 'Longest Bitonic Subsequence.' },
            { id: 43, name: 'LIS-6', question: 'Number of Longest Increasing Subsequences.' },
            { id: 44, name: 'MCM-1', question: 'Matrix Chain Multiplication (MCM).' },
            { id: 45, name: 'MCM-2', question: 'Minimum cost to cut a stick.' },
            { id: 46, name: 'MCM-3', question: 'Burst Balloons.' },
            { id: 47, name: 'MCM-4', question: 'Evaluate Boolean Expression to True.' },
            { id: 48, name: 'MCM-5', question: 'Palindrome Partitioning II.' },
            { id: 49, name: 'MCM-6', question: 'Partition Array for Maximum Sum.' },
            { id: 50, name: 'Surprise', question: 'Explain the difference between memoization and tabulation, including their pros and cons.', isSurprise: true },
        ]
    },
    {
        id: 'step-17-tries',
        name: 'Step 17: Tries',
        description: 'Learn the Trie data structure for efficient string searching.',
        initialLives: 3,
        levels: [
            { id: 1, name: 'Trie-1', question: 'Implement a Trie (Prefix Tree) with insert, search, and startsWith methods.' },
            { id: 2, name: 'Trie-2', question: 'Implement a Trie with `countWordsEqualTo` and `countWordsStartingWith` methods.' },
            { id: 3, name: 'Trie-3', question: 'Find the longest word in a dictionary that is a composition of other words in the dictionary.' },
            { id: 4, name: 'Trie-4', question: 'Implement Power Set using Tries.' },
            { id: 5, name: 'Trie-5', question: 'Find the maximum XOR of two numbers in an array.' },
            { id: 6, name: 'Trie-6', question: 'Find the maximum XOR with an element from an array for a given query.' },
            { id: 7, name: 'Surprise', question: 'How would you design an autocomplete system (like Google search suggestions) using a Trie?', isSurprise: true },
        ]
    },
    {
        id: 'step-18-advanced',
        name: 'Step 18: Advanced Algorithms',
        description: 'Explore advanced data structures and algorithms.',
        initialLives: 3,
        levels: [
            { id: 1, name: 'DSU-1', question: 'Implement Disjoint Set Union (DSU) by Rank and Path Compression.' },
            { id: 2, name: 'DSU-2', question: 'Find the number of connected components in a graph using DSU.' },
            { id: 3, name: 'Segment Tree-1', question: 'Implement a Segment Tree for range sum queries.' },
            { id: 4, name: 'Segment Tree-2', question: 'Implement a Segment Tree with point updates.' },
            { id: 5, name: 'Surprise', question: 'Explain Lazy Propagation in Segment Trees and when it is necessary.', isSurprise: true },
        ]
    }
];
